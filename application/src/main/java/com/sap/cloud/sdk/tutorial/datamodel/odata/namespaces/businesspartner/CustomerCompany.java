
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.1.0
 */

package com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;
import com.sap.cloud.sdk.datamodel.odata.client.exception.ODataException;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.field.CustomerCompanyField;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.link.CustomerCompanyLink;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.selectable.CustomerCompanySelectable;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * Customer Company<p></p><p>Original entity name from the Odata EDM: <b>A_CustomerCompanyType</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class CustomerCompany
    extends VdmEntity<CustomerCompany>
{

    /**
     * Selector for all available fields of CustomerCompany.
     * 
     */
    public final static CustomerCompanySelectable ALL_FIELDS = () -> "*";
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Customer</b></p>
     * 
     * @return
     *     Customer Number
     */
    @Key
    @SerializedName("Customer")
    @JsonProperty("Customer")
    @Nullable
    @ODataField(odataName = "Customer")
    private String customer;
    /**
     * Use with available fluent helpers to apply the <b>Customer</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> CUSTOMER = new CustomerCompanyField<String>("Customer");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CompanyCode</b></p>
     * 
     * @return
     *     Company Code
     */
    @Key
    @SerializedName("CompanyCode")
    @JsonProperty("CompanyCode")
    @Nullable
    @ODataField(odataName = "CompanyCode")
    private String companyCode;
    /**
     * Use with available fluent helpers to apply the <b>CompanyCode</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> COMPANY_CODE = new CustomerCompanyField<String>("CompanyCode");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>APARToleranceGroup</b></p>
     * 
     * @return
     *     Tolerance Group for Business Partner/G/L Account
     */
    @SerializedName("APARToleranceGroup")
    @JsonProperty("APARToleranceGroup")
    @Nullable
    @ODataField(odataName = "APARToleranceGroup")
    private String toleranceGroup;
    /**
     * Use with available fluent helpers to apply the <b>APARToleranceGroup</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> TOLERANCE_GROUP = new CustomerCompanyField<String>("APARToleranceGroup");
    /**
     * Constraints: Not nullable, Maximum length: 12 <p>Original property name from the Odata EDM: <b>AccountByCustomer</b></p>
     * 
     * @return
     *     Our account number at customer
     */
    @SerializedName("AccountByCustomer")
    @JsonProperty("AccountByCustomer")
    @Nullable
    @ODataField(odataName = "AccountByCustomer")
    private String accountAtCustomer;
    /**
     * Use with available fluent helpers to apply the <b>AccountByCustomer</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ACCOUNT_AT_CUSTOMER = new CustomerCompanyField<String>("AccountByCustomer");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>AccountingClerk</b></p>
     * 
     * @return
     *     Accounting Clerk Abbreviation
     */
    @SerializedName("AccountingClerk")
    @JsonProperty("AccountingClerk")
    @Nullable
    @ODataField(odataName = "AccountingClerk")
    private String clerkAbbrev;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerk</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> CLERK_ABBREV = new CustomerCompanyField<String>("AccountingClerk");
    /**
     * Constraints: Not nullable, Maximum length: 31 <p>Original property name from the Odata EDM: <b>AccountingClerkFaxNumber</b></p>
     * 
     * @return
     *     Accounting clerk's fax number at the customer/vendor
     */
    @SerializedName("AccountingClerkFaxNumber")
    @JsonProperty("AccountingClerkFaxNumber")
    @Nullable
    @ODataField(odataName = "AccountingClerkFaxNumber")
    private String acctgClerksFax;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerkFaxNumber</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ACCTG_CLERKS_FAX = new CustomerCompanyField<String>("AccountingClerkFaxNumber");
    /**
     * Constraints: Not nullable, Maximum length: 130 <p>Original property name from the Odata EDM: <b>AccountingClerkInternetAddress</b></p>
     * 
     * @return
     *     Internet address of partner company clerk
     */
    @SerializedName("AccountingClerkInternetAddress")
    @JsonProperty("AccountingClerkInternetAddress")
    @Nullable
    @ODataField(odataName = "AccountingClerkInternetAddress")
    private String clrksInternetAdd;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerkInternetAddress</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> CLRKS_INTERNET_ADD = new CustomerCompanyField<String>("AccountingClerkInternetAddress");
    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>AccountingClerkPhoneNumber</b></p>
     * 
     * @return
     *     Accounting clerk's telephone number at business partner
     */
    @SerializedName("AccountingClerkPhoneNumber")
    @JsonProperty("AccountingClerkPhoneNumber")
    @Nullable
    @ODataField(odataName = "AccountingClerkPhoneNumber")
    private String acctclerksTelno;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerkPhoneNumber</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ACCTCLERKS_TELNO = new CustomerCompanyField<String>("AccountingClerkPhoneNumber");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>AlternativePayerAccount</b></p>
     * 
     * @return
     *     Account number of an alternative payer
     */
    @SerializedName("AlternativePayerAccount")
    @JsonProperty("AlternativePayerAccount")
    @Nullable
    @ODataField(odataName = "AlternativePayerAccount")
    private String alternativePayer;
    /**
     * Use with available fluent helpers to apply the <b>AlternativePayerAccount</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ALTERNATIVE_PAYER = new CustomerCompanyField<String>("AlternativePayerAccount");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>AuthorizationGroup</b></p>
     * 
     * @return
     *     Authorization Group
     */
    @SerializedName("AuthorizationGroup")
    @JsonProperty("AuthorizationGroup")
    @Nullable
    @ODataField(odataName = "AuthorizationGroup")
    private String authorization;
    /**
     * Use with available fluent helpers to apply the <b>AuthorizationGroup</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> AUTHORIZATION = new CustomerCompanyField<String>("AuthorizationGroup");
    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>CollectiveInvoiceVariant</b></p>
     * 
     * @return
     *     Collective Invoice Variant
     */
    @SerializedName("CollectiveInvoiceVariant")
    @JsonProperty("CollectiveInvoiceVariant")
    @Nullable
    @ODataField(odataName = "CollectiveInvoiceVariant")
    private String collInvoiceVariant;
    /**
     * Use with available fluent helpers to apply the <b>CollectiveInvoiceVariant</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> COLL_INVOICE_VARIANT = new CustomerCompanyField<String>("CollectiveInvoiceVariant");
    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>CustomerAccountNote</b></p>
     * 
     * @return
     *     Memo
     */
    @SerializedName("CustomerAccountNote")
    @JsonProperty("CustomerAccountNote")
    @Nullable
    @ODataField(odataName = "CustomerAccountNote")
    private String accountMemo;
    /**
     * Use with available fluent helpers to apply the <b>CustomerAccountNote</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ACCOUNT_MEMO = new CustomerCompanyField<String>("CustomerAccountNote");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CustomerHeadOffice</b></p>
     * 
     * @return
     *     Head Office Account Number (in branch accounts)
     */
    @SerializedName("CustomerHeadOffice")
    @JsonProperty("CustomerHeadOffice")
    @Nullable
    @ODataField(odataName = "CustomerHeadOffice")
    private String headOffice;
    /**
     * Use with available fluent helpers to apply the <b>CustomerHeadOffice</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> HEAD_OFFICE = new CustomerCompanyField<String>("CustomerHeadOffice");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>CustomerSupplierClearingIsUsed</b></p>
     * 
     * @return
     *     Indicator: Clearing between customer and vendor ?
     */
    @SerializedName("CustomerSupplierClearingIsUsed")
    @JsonProperty("CustomerSupplierClearingIsUsed")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "CustomerSupplierClearingIsUsed")
    private Boolean clearingWithVendor;
    /**
     * Use with available fluent helpers to apply the <b>CustomerSupplierClearingIsUsed</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> CLEARING_WITH_VENDOR = new CustomerCompanyField<Boolean>("CustomerSupplierClearingIsUsed");
    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>HouseBank</b></p>
     * 
     * @return
     *     Short Key for a House Bank
     */
    @SerializedName("HouseBank")
    @JsonProperty("HouseBank")
    @Nullable
    @ODataField(odataName = "HouseBank")
    private String houseBank;
    /**
     * Use with available fluent helpers to apply the <b>HouseBank</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> HOUSE_BANK = new CustomerCompanyField<String>("HouseBank");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>InterestCalculationCode</b></p>
     * 
     * @return
     *     Interest Indicator
     */
    @SerializedName("InterestCalculationCode")
    @JsonProperty("InterestCalculationCode")
    @Nullable
    @ODataField(odataName = "InterestCalculationCode")
    private String interestIndicator;
    /**
     * Use with available fluent helpers to apply the <b>InterestCalculationCode</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> INTEREST_INDICATOR = new CustomerCompanyField<String>("InterestCalculationCode");
    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>InterestCalculationDate</b></p>
     * 
     * @return
     *     Key Date of Last Interest Calculation
     */
    @SerializedName("InterestCalculationDate")
    @JsonProperty("InterestCalculationDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "InterestCalculationDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime lastKeyDate;
    /**
     * Use with available fluent helpers to apply the <b>InterestCalculationDate</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<LocalDateTime> LAST_KEY_DATE = new CustomerCompanyField<LocalDateTime>("InterestCalculationDate");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>IntrstCalcFrequencyInMonths</b></p>
     * 
     * @return
     *     Interest Calculation Frequency in Months
     */
    @SerializedName("IntrstCalcFrequencyInMonths")
    @JsonProperty("IntrstCalcFrequencyInMonths")
    @Nullable
    @ODataField(odataName = "IntrstCalcFrequencyInMonths")
    private String intCalcFreq;
    /**
     * Use with available fluent helpers to apply the <b>IntrstCalcFrequencyInMonths</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> INT_CALC_FREQ = new CustomerCompanyField<String>("IntrstCalcFrequencyInMonths");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeLocallyProcessed</b></p>
     * 
     * @return
     *     Indicator: Local Processing?
     */
    @SerializedName("IsToBeLocallyProcessed")
    @JsonProperty("IsToBeLocallyProcessed")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "IsToBeLocallyProcessed")
    private Boolean localProcessing;
    /**
     * Use with available fluent helpers to apply the <b>IsToBeLocallyProcessed</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> LOCAL_PROCESSING = new CustomerCompanyField<Boolean>("IsToBeLocallyProcessed");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ItemIsToBePaidSeparately</b></p>
     * 
     * @return
     *     Indicator: Pay All Items Separately?
     */
    @SerializedName("ItemIsToBePaidSeparately")
    @JsonProperty("ItemIsToBePaidSeparately")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "ItemIsToBePaidSeparately")
    private Boolean individualPayment;
    /**
     * Use with available fluent helpers to apply the <b>ItemIsToBePaidSeparately</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> INDIVIDUAL_PAYMENT = new CustomerCompanyField<Boolean>("ItemIsToBePaidSeparately");
    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>LayoutSortingRule</b></p>
     * 
     * @return
     *     Key for Sorting According to Assignment Numbers
     */
    @SerializedName("LayoutSortingRule")
    @JsonProperty("LayoutSortingRule")
    @Nullable
    @ODataField(odataName = "LayoutSortingRule")
    private String sortKey;
    /**
     * Use with available fluent helpers to apply the <b>LayoutSortingRule</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> SORT_KEY = new CustomerCompanyField<String>("LayoutSortingRule");
    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>PaymentBlockingReason</b></p>
     * 
     * @return
     *     Block Key for Payment
     */
    @SerializedName("PaymentBlockingReason")
    @JsonProperty("PaymentBlockingReason")
    @Nullable
    @ODataField(odataName = "PaymentBlockingReason")
    private String paymentBlock;
    /**
     * Use with available fluent helpers to apply the <b>PaymentBlockingReason</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> PAYMENT_BLOCK = new CustomerCompanyField<String>("PaymentBlockingReason");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>PaymentMethodsList</b></p>
     * 
     * @return
     *     List of Respected Payment Methods
     */
    @SerializedName("PaymentMethodsList")
    @JsonProperty("PaymentMethodsList")
    @Nullable
    @ODataField(odataName = "PaymentMethodsList")
    private String paymentMethods;
    /**
     * Use with available fluent helpers to apply the <b>PaymentMethodsList</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> PAYMENT_METHODS = new CustomerCompanyField<String>("PaymentMethodsList");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentReason</b></p>
     * 
     * @return
     *     Payment Reason
     */
    @SerializedName("PaymentReason")
    @JsonProperty("PaymentReason")
    @Nullable
    @ODataField(odataName = "PaymentReason")
    private String paymentReason;
    /**
     * Use with available fluent helpers to apply the <b>PaymentReason</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> PAYMENT_REASON = new CustomerCompanyField<String>("PaymentReason");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentTerms</b></p>
     * 
     * @return
     *     Key for Terms of Payment
     */
    @SerializedName("PaymentTerms")
    @JsonProperty("PaymentTerms")
    @Nullable
    @ODataField(odataName = "PaymentTerms")
    private String termsOfPayment;
    /**
     * Use with available fluent helpers to apply the <b>PaymentTerms</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> TERMS_OF_PAYMENT = new CustomerCompanyField<String>("PaymentTerms");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PaytAdviceIsSentbyEDI</b></p>
     * 
     * @return
     *     Indicator: Send Payment Advices by EDI
     */
    @SerializedName("PaytAdviceIsSentbyEDI")
    @JsonProperty("PaytAdviceIsSentbyEDI")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "PaytAdviceIsSentbyEDI")
    private Boolean pmntAdviceByEDI;
    /**
     * Use with available fluent helpers to apply the <b>PaytAdviceIsSentbyEDI</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> PMNT_ADVICE_BY_EDI = new CustomerCompanyField<Boolean>("PaytAdviceIsSentbyEDI");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PhysicalInventoryBlockInd</b></p>
     * 
     * @return
     *     Posting block for company code
     */
    @SerializedName("PhysicalInventoryBlockInd")
    @JsonProperty("PhysicalInventoryBlockInd")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "PhysicalInventoryBlockInd")
    private Boolean cocodePostblock;
    /**
     * Use with available fluent helpers to apply the <b>PhysicalInventoryBlockInd</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> COCODE_POSTBLOCK = new CustomerCompanyField<Boolean>("PhysicalInventoryBlockInd");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>ReconciliationAccount</b></p>
     * 
     * @return
     *     Reconciliation Account in General Ledger
     */
    @SerializedName("ReconciliationAccount")
    @JsonProperty("ReconciliationAccount")
    @Nullable
    @ODataField(odataName = "ReconciliationAccount")
    private String reconciliationAcct;
    /**
     * Use with available fluent helpers to apply the <b>ReconciliationAccount</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> RECONCILIATION_ACCT = new CustomerCompanyField<String>("ReconciliationAccount");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>RecordPaymentHistoryIndicator</b></p>
     * 
     * @return
     *     Indicator: Record Payment History ?
     */
    @SerializedName("RecordPaymentHistoryIndicator")
    @JsonProperty("RecordPaymentHistoryIndicator")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "RecordPaymentHistoryIndicator")
    private Boolean recordPmntHistory;
    /**
     * Use with available fluent helpers to apply the <b>RecordPaymentHistoryIndicator</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> RECORD_PMNT_HISTORY = new CustomerCompanyField<Boolean>("RecordPaymentHistoryIndicator");
    /**
     * Constraints: Not nullable, Maximum length: 15 <p>Original property name from the Odata EDM: <b>UserAtCustomer</b></p>
     * 
     * @return
     *     User at customer
     */
    @SerializedName("UserAtCustomer")
    @JsonProperty("UserAtCustomer")
    @Nullable
    @ODataField(odataName = "UserAtCustomer")
    private String userAtCustomer;
    /**
     * Use with available fluent helpers to apply the <b>UserAtCustomer</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> USER_AT_CUSTOMER = new CustomerCompanyField<String>("UserAtCustomer");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>DeletionIndicator</b></p>
     * 
     * @return
     *     Deletion Flag for Master Record (Company Code Level)
     */
    @SerializedName("DeletionIndicator")
    @JsonProperty("DeletionIndicator")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "DeletionIndicator")
    private Boolean coCdeDeletionFlag;
    /**
     * Use with available fluent helpers to apply the <b>DeletionIndicator</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<Boolean> CO_CDE_DELETION_FLAG = new CustomerCompanyField<Boolean>("DeletionIndicator");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CashPlanningGroup</b></p>
     * 
     * @return
     *     Planning Group
     */
    @SerializedName("CashPlanningGroup")
    @JsonProperty("CashPlanningGroup")
    @Nullable
    @ODataField(odataName = "CashPlanningGroup")
    private String planningGroup;
    /**
     * Use with available fluent helpers to apply the <b>CashPlanningGroup</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> PLANNING_GROUP = new CustomerCompanyField<String>("CashPlanningGroup");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>KnownOrNegotiatedLeave</b></p>
     * 
     * @return
     *     Short Key for Known/Negotiated Leave
     */
    @SerializedName("KnownOrNegotiatedLeave")
    @JsonProperty("KnownOrNegotiatedLeave")
    @Nullable
    @ODataField(odataName = "KnownOrNegotiatedLeave")
    private String knownNegotiatLeave;
    /**
     * Use with available fluent helpers to apply the <b>KnownOrNegotiatedLeave</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> KNOWN_NEGOTIAT_LEAVE = new CustomerCompanyField<String>("KnownOrNegotiatedLeave");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>ValueAdjustmentKey</b></p>
     * 
     * @return
     *     Value Adjustment Key
     */
    @SerializedName("ValueAdjustmentKey")
    @JsonProperty("ValueAdjustmentKey")
    @Nullable
    @ODataField(odataName = "ValueAdjustmentKey")
    private String valueAdjustment;
    /**
     * Use with available fluent helpers to apply the <b>ValueAdjustmentKey</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> VALUE_ADJUSTMENT = new CustomerCompanyField<String>("ValueAdjustmentKey");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CustomerAccountGroup</b></p>
     * 
     * @return
     *     Customer Account Group
     */
    @SerializedName("CustomerAccountGroup")
    @JsonProperty("CustomerAccountGroup")
    @Nullable
    @ODataField(odataName = "CustomerAccountGroup")
    private String accountGroup;
    /**
     * Use with available fluent helpers to apply the <b>CustomerAccountGroup</b> field to query operations.
     * 
     */
    public final static CustomerCompanyField<String> ACCOUNT_GROUP = new CustomerCompanyField<String>("CustomerAccountGroup");
    /**
     * Navigation property <b>to_CompanyText</b> for <b>CustomerCompany</b> to multiple <b>CustomerCompanyText</b>.
     * 
     */
    @SerializedName("to_CompanyText")
    @JsonProperty("to_CompanyText")
    @ODataField(odataName = "to_CompanyText")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<CustomerCompanyText> toCompanyText;
    /**
     * Navigation property <b>to_CustomerDunning</b> for <b>CustomerCompany</b> to multiple <b>CustomerDunning</b>.
     * 
     */
    @SerializedName("to_CustomerDunning")
    @JsonProperty("to_CustomerDunning")
    @ODataField(odataName = "to_CustomerDunning")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<CustomerDunning> toCustomerDunning;
    /**
     * Navigation property <b>to_WithHoldingTax</b> for <b>CustomerCompany</b> to multiple <b>WithholdingTax</b>.
     * 
     */
    @SerializedName("to_WithHoldingTax")
    @JsonProperty("to_WithHoldingTax")
    @ODataField(odataName = "to_WithHoldingTax")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<WithholdingTax> toWithHoldingTax;
    /**
     * Use with available fluent helpers to apply the <b>to_CompanyText</b> navigation property to query operations.
     * 
     */
    public final static CustomerCompanyLink<CustomerCompanyText> TO_COMPANY_TEXT = new CustomerCompanyLink<CustomerCompanyText>("to_CompanyText");
    /**
     * Use with available fluent helpers to apply the <b>to_CustomerDunning</b> navigation property to query operations.
     * 
     */
    public final static CustomerCompanyLink<CustomerDunning> TO_CUSTOMER_DUNNING = new CustomerCompanyLink<CustomerDunning>("to_CustomerDunning");
    /**
     * Use with available fluent helpers to apply the <b>to_WithHoldingTax</b> navigation property to query operations.
     * 
     */
    public final static CustomerCompanyLink<WithholdingTax> TO_WITH_HOLDING_TAX = new CustomerCompanyLink<WithholdingTax>("to_WithHoldingTax");

    @Nonnull
    @Override
    public Class<CustomerCompany> getType() {
        return CustomerCompany.class;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Customer</b></p>
     * 
     * @param customer
     *     Customer Number
     */
    public void setCustomer(
        @Nullable
        final String customer) {
        rememberChangedField("Customer", this.customer);
        this.customer = customer;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CompanyCode</b></p>
     * 
     * @param companyCode
     *     Company Code
     */
    public void setCompanyCode(
        @Nullable
        final String companyCode) {
        rememberChangedField("CompanyCode", this.companyCode);
        this.companyCode = companyCode;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>APARToleranceGroup</b></p>
     * 
     * @param toleranceGroup
     *     Tolerance Group for Business Partner/G/L Account
     */
    public void setToleranceGroup(
        @Nullable
        final String toleranceGroup) {
        rememberChangedField("APARToleranceGroup", this.toleranceGroup);
        this.toleranceGroup = toleranceGroup;
    }

    /**
     * Constraints: Not nullable, Maximum length: 12 <p>Original property name from the Odata EDM: <b>AccountByCustomer</b></p>
     * 
     * @param accountAtCustomer
     *     Our account number at customer
     */
    public void setAccountAtCustomer(
        @Nullable
        final String accountAtCustomer) {
        rememberChangedField("AccountByCustomer", this.accountAtCustomer);
        this.accountAtCustomer = accountAtCustomer;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>AccountingClerk</b></p>
     * 
     * @param clerkAbbrev
     *     Accounting Clerk Abbreviation
     */
    public void setClerkAbbrev(
        @Nullable
        final String clerkAbbrev) {
        rememberChangedField("AccountingClerk", this.clerkAbbrev);
        this.clerkAbbrev = clerkAbbrev;
    }

    /**
     * Constraints: Not nullable, Maximum length: 31 <p>Original property name from the Odata EDM: <b>AccountingClerkFaxNumber</b></p>
     * 
     * @param acctgClerksFax
     *     Accounting clerk's fax number at the customer/vendor
     */
    public void setAcctgClerksFax(
        @Nullable
        final String acctgClerksFax) {
        rememberChangedField("AccountingClerkFaxNumber", this.acctgClerksFax);
        this.acctgClerksFax = acctgClerksFax;
    }

    /**
     * Constraints: Not nullable, Maximum length: 130 <p>Original property name from the Odata EDM: <b>AccountingClerkInternetAddress</b></p>
     * 
     * @param clrksInternetAdd
     *     Internet address of partner company clerk
     */
    public void setClrksInternetAdd(
        @Nullable
        final String clrksInternetAdd) {
        rememberChangedField("AccountingClerkInternetAddress", this.clrksInternetAdd);
        this.clrksInternetAdd = clrksInternetAdd;
    }

    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>AccountingClerkPhoneNumber</b></p>
     * 
     * @param acctclerksTelno
     *     Accounting clerk's telephone number at business partner
     */
    public void setAcctclerksTelno(
        @Nullable
        final String acctclerksTelno) {
        rememberChangedField("AccountingClerkPhoneNumber", this.acctclerksTelno);
        this.acctclerksTelno = acctclerksTelno;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>AlternativePayerAccount</b></p>
     * 
     * @param alternativePayer
     *     Account number of an alternative payer
     */
    public void setAlternativePayer(
        @Nullable
        final String alternativePayer) {
        rememberChangedField("AlternativePayerAccount", this.alternativePayer);
        this.alternativePayer = alternativePayer;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>AuthorizationGroup</b></p>
     * 
     * @param authorization
     *     Authorization Group
     */
    public void setAuthorization(
        @Nullable
        final String authorization) {
        rememberChangedField("AuthorizationGroup", this.authorization);
        this.authorization = authorization;
    }

    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>CollectiveInvoiceVariant</b></p>
     * 
     * @param collInvoiceVariant
     *     Collective Invoice Variant
     */
    public void setCollInvoiceVariant(
        @Nullable
        final String collInvoiceVariant) {
        rememberChangedField("CollectiveInvoiceVariant", this.collInvoiceVariant);
        this.collInvoiceVariant = collInvoiceVariant;
    }

    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>CustomerAccountNote</b></p>
     * 
     * @param accountMemo
     *     Memo
     */
    public void setAccountMemo(
        @Nullable
        final String accountMemo) {
        rememberChangedField("CustomerAccountNote", this.accountMemo);
        this.accountMemo = accountMemo;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CustomerHeadOffice</b></p>
     * 
     * @param headOffice
     *     Head Office Account Number (in branch accounts)
     */
    public void setHeadOffice(
        @Nullable
        final String headOffice) {
        rememberChangedField("CustomerHeadOffice", this.headOffice);
        this.headOffice = headOffice;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>CustomerSupplierClearingIsUsed</b></p>
     * 
     * @param clearingWithVendor
     *     Indicator: Clearing between customer and vendor ?
     */
    public void setClearingWithVendor(
        @Nullable
        final Boolean clearingWithVendor) {
        rememberChangedField("CustomerSupplierClearingIsUsed", this.clearingWithVendor);
        this.clearingWithVendor = clearingWithVendor;
    }

    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>HouseBank</b></p>
     * 
     * @param houseBank
     *     Short Key for a House Bank
     */
    public void setHouseBank(
        @Nullable
        final String houseBank) {
        rememberChangedField("HouseBank", this.houseBank);
        this.houseBank = houseBank;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>InterestCalculationCode</b></p>
     * 
     * @param interestIndicator
     *     Interest Indicator
     */
    public void setInterestIndicator(
        @Nullable
        final String interestIndicator) {
        rememberChangedField("InterestCalculationCode", this.interestIndicator);
        this.interestIndicator = interestIndicator;
    }

    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>InterestCalculationDate</b></p>
     * 
     * @param lastKeyDate
     *     Key Date of Last Interest Calculation
     */
    public void setLastKeyDate(
        @Nullable
        final LocalDateTime lastKeyDate) {
        rememberChangedField("InterestCalculationDate", this.lastKeyDate);
        this.lastKeyDate = lastKeyDate;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>IntrstCalcFrequencyInMonths</b></p>
     * 
     * @param intCalcFreq
     *     Interest Calculation Frequency in Months
     */
    public void setIntCalcFreq(
        @Nullable
        final String intCalcFreq) {
        rememberChangedField("IntrstCalcFrequencyInMonths", this.intCalcFreq);
        this.intCalcFreq = intCalcFreq;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeLocallyProcessed</b></p>
     * 
     * @param localProcessing
     *     Indicator: Local Processing?
     */
    public void setLocalProcessing(
        @Nullable
        final Boolean localProcessing) {
        rememberChangedField("IsToBeLocallyProcessed", this.localProcessing);
        this.localProcessing = localProcessing;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ItemIsToBePaidSeparately</b></p>
     * 
     * @param individualPayment
     *     Indicator: Pay All Items Separately?
     */
    public void setIndividualPayment(
        @Nullable
        final Boolean individualPayment) {
        rememberChangedField("ItemIsToBePaidSeparately", this.individualPayment);
        this.individualPayment = individualPayment;
    }

    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>LayoutSortingRule</b></p>
     * 
     * @param sortKey
     *     Key for Sorting According to Assignment Numbers
     */
    public void setSortKey(
        @Nullable
        final String sortKey) {
        rememberChangedField("LayoutSortingRule", this.sortKey);
        this.sortKey = sortKey;
    }

    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>PaymentBlockingReason</b></p>
     * 
     * @param paymentBlock
     *     Block Key for Payment
     */
    public void setPaymentBlock(
        @Nullable
        final String paymentBlock) {
        rememberChangedField("PaymentBlockingReason", this.paymentBlock);
        this.paymentBlock = paymentBlock;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>PaymentMethodsList</b></p>
     * 
     * @param paymentMethods
     *     List of Respected Payment Methods
     */
    public void setPaymentMethods(
        @Nullable
        final String paymentMethods) {
        rememberChangedField("PaymentMethodsList", this.paymentMethods);
        this.paymentMethods = paymentMethods;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentReason</b></p>
     * 
     * @param paymentReason
     *     Payment Reason
     */
    public void setPaymentReason(
        @Nullable
        final String paymentReason) {
        rememberChangedField("PaymentReason", this.paymentReason);
        this.paymentReason = paymentReason;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentTerms</b></p>
     * 
     * @param termsOfPayment
     *     Key for Terms of Payment
     */
    public void setTermsOfPayment(
        @Nullable
        final String termsOfPayment) {
        rememberChangedField("PaymentTerms", this.termsOfPayment);
        this.termsOfPayment = termsOfPayment;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PaytAdviceIsSentbyEDI</b></p>
     * 
     * @param pmntAdviceByEDI
     *     Indicator: Send Payment Advices by EDI
     */
    public void setPmntAdviceByEDI(
        @Nullable
        final Boolean pmntAdviceByEDI) {
        rememberChangedField("PaytAdviceIsSentbyEDI", this.pmntAdviceByEDI);
        this.pmntAdviceByEDI = pmntAdviceByEDI;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PhysicalInventoryBlockInd</b></p>
     * 
     * @param cocodePostblock
     *     Posting block for company code
     */
    public void setCocodePostblock(
        @Nullable
        final Boolean cocodePostblock) {
        rememberChangedField("PhysicalInventoryBlockInd", this.cocodePostblock);
        this.cocodePostblock = cocodePostblock;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>ReconciliationAccount</b></p>
     * 
     * @param reconciliationAcct
     *     Reconciliation Account in General Ledger
     */
    public void setReconciliationAcct(
        @Nullable
        final String reconciliationAcct) {
        rememberChangedField("ReconciliationAccount", this.reconciliationAcct);
        this.reconciliationAcct = reconciliationAcct;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>RecordPaymentHistoryIndicator</b></p>
     * 
     * @param recordPmntHistory
     *     Indicator: Record Payment History ?
     */
    public void setRecordPmntHistory(
        @Nullable
        final Boolean recordPmntHistory) {
        rememberChangedField("RecordPaymentHistoryIndicator", this.recordPmntHistory);
        this.recordPmntHistory = recordPmntHistory;
    }

    /**
     * Constraints: Not nullable, Maximum length: 15 <p>Original property name from the Odata EDM: <b>UserAtCustomer</b></p>
     * 
     * @param userAtCustomer
     *     User at customer
     */
    public void setUserAtCustomer(
        @Nullable
        final String userAtCustomer) {
        rememberChangedField("UserAtCustomer", this.userAtCustomer);
        this.userAtCustomer = userAtCustomer;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>DeletionIndicator</b></p>
     * 
     * @param coCdeDeletionFlag
     *     Deletion Flag for Master Record (Company Code Level)
     */
    public void setCoCdeDeletionFlag(
        @Nullable
        final Boolean coCdeDeletionFlag) {
        rememberChangedField("DeletionIndicator", this.coCdeDeletionFlag);
        this.coCdeDeletionFlag = coCdeDeletionFlag;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CashPlanningGroup</b></p>
     * 
     * @param planningGroup
     *     Planning Group
     */
    public void setPlanningGroup(
        @Nullable
        final String planningGroup) {
        rememberChangedField("CashPlanningGroup", this.planningGroup);
        this.planningGroup = planningGroup;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>KnownOrNegotiatedLeave</b></p>
     * 
     * @param knownNegotiatLeave
     *     Short Key for Known/Negotiated Leave
     */
    public void setKnownNegotiatLeave(
        @Nullable
        final String knownNegotiatLeave) {
        rememberChangedField("KnownOrNegotiatedLeave", this.knownNegotiatLeave);
        this.knownNegotiatLeave = knownNegotiatLeave;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>ValueAdjustmentKey</b></p>
     * 
     * @param valueAdjustment
     *     Value Adjustment Key
     */
    public void setValueAdjustment(
        @Nullable
        final String valueAdjustment) {
        rememberChangedField("ValueAdjustmentKey", this.valueAdjustment);
        this.valueAdjustment = valueAdjustment;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CustomerAccountGroup</b></p>
     * 
     * @param accountGroup
     *     Customer Account Group
     */
    public void setAccountGroup(
        @Nullable
        final String accountGroup) {
        rememberChangedField("CustomerAccountGroup", this.accountGroup);
        this.accountGroup = accountGroup;
    }

    @Override
    protected String getEntityCollection() {
        return "A_CustomerCompany";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("Customer", getCustomer());
        result.put("CompanyCode", getCompanyCode());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("Customer", getCustomer());
        values.put("CompanyCode", getCompanyCode());
        values.put("APARToleranceGroup", getToleranceGroup());
        values.put("AccountByCustomer", getAccountAtCustomer());
        values.put("AccountingClerk", getClerkAbbrev());
        values.put("AccountingClerkFaxNumber", getAcctgClerksFax());
        values.put("AccountingClerkInternetAddress", getClrksInternetAdd());
        values.put("AccountingClerkPhoneNumber", getAcctclerksTelno());
        values.put("AlternativePayerAccount", getAlternativePayer());
        values.put("AuthorizationGroup", getAuthorization());
        values.put("CollectiveInvoiceVariant", getCollInvoiceVariant());
        values.put("CustomerAccountNote", getAccountMemo());
        values.put("CustomerHeadOffice", getHeadOffice());
        values.put("CustomerSupplierClearingIsUsed", getClearingWithVendor());
        values.put("HouseBank", getHouseBank());
        values.put("InterestCalculationCode", getInterestIndicator());
        values.put("InterestCalculationDate", getLastKeyDate());
        values.put("IntrstCalcFrequencyInMonths", getIntCalcFreq());
        values.put("IsToBeLocallyProcessed", getLocalProcessing());
        values.put("ItemIsToBePaidSeparately", getIndividualPayment());
        values.put("LayoutSortingRule", getSortKey());
        values.put("PaymentBlockingReason", getPaymentBlock());
        values.put("PaymentMethodsList", getPaymentMethods());
        values.put("PaymentReason", getPaymentReason());
        values.put("PaymentTerms", getTermsOfPayment());
        values.put("PaytAdviceIsSentbyEDI", getPmntAdviceByEDI());
        values.put("PhysicalInventoryBlockInd", getCocodePostblock());
        values.put("ReconciliationAccount", getReconciliationAcct());
        values.put("RecordPaymentHistoryIndicator", getRecordPmntHistory());
        values.put("UserAtCustomer", getUserAtCustomer());
        values.put("DeletionIndicator", getCoCdeDeletionFlag());
        values.put("CashPlanningGroup", getPlanningGroup());
        values.put("KnownOrNegotiatedLeave", getKnownNegotiatLeave());
        values.put("ValueAdjustmentKey", getValueAdjustment());
        values.put("CustomerAccountGroup", getAccountGroup());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("Customer")) {
                final Object value = values.remove("Customer");
                if ((value == null)||(!value.equals(getCustomer()))) {
                    setCustomer(((String) value));
                }
            }
            if (values.containsKey("CompanyCode")) {
                final Object value = values.remove("CompanyCode");
                if ((value == null)||(!value.equals(getCompanyCode()))) {
                    setCompanyCode(((String) value));
                }
            }
            if (values.containsKey("APARToleranceGroup")) {
                final Object value = values.remove("APARToleranceGroup");
                if ((value == null)||(!value.equals(getToleranceGroup()))) {
                    setToleranceGroup(((String) value));
                }
            }
            if (values.containsKey("AccountByCustomer")) {
                final Object value = values.remove("AccountByCustomer");
                if ((value == null)||(!value.equals(getAccountAtCustomer()))) {
                    setAccountAtCustomer(((String) value));
                }
            }
            if (values.containsKey("AccountingClerk")) {
                final Object value = values.remove("AccountingClerk");
                if ((value == null)||(!value.equals(getClerkAbbrev()))) {
                    setClerkAbbrev(((String) value));
                }
            }
            if (values.containsKey("AccountingClerkFaxNumber")) {
                final Object value = values.remove("AccountingClerkFaxNumber");
                if ((value == null)||(!value.equals(getAcctgClerksFax()))) {
                    setAcctgClerksFax(((String) value));
                }
            }
            if (values.containsKey("AccountingClerkInternetAddress")) {
                final Object value = values.remove("AccountingClerkInternetAddress");
                if ((value == null)||(!value.equals(getClrksInternetAdd()))) {
                    setClrksInternetAdd(((String) value));
                }
            }
            if (values.containsKey("AccountingClerkPhoneNumber")) {
                final Object value = values.remove("AccountingClerkPhoneNumber");
                if ((value == null)||(!value.equals(getAcctclerksTelno()))) {
                    setAcctclerksTelno(((String) value));
                }
            }
            if (values.containsKey("AlternativePayerAccount")) {
                final Object value = values.remove("AlternativePayerAccount");
                if ((value == null)||(!value.equals(getAlternativePayer()))) {
                    setAlternativePayer(((String) value));
                }
            }
            if (values.containsKey("AuthorizationGroup")) {
                final Object value = values.remove("AuthorizationGroup");
                if ((value == null)||(!value.equals(getAuthorization()))) {
                    setAuthorization(((String) value));
                }
            }
            if (values.containsKey("CollectiveInvoiceVariant")) {
                final Object value = values.remove("CollectiveInvoiceVariant");
                if ((value == null)||(!value.equals(getCollInvoiceVariant()))) {
                    setCollInvoiceVariant(((String) value));
                }
            }
            if (values.containsKey("CustomerAccountNote")) {
                final Object value = values.remove("CustomerAccountNote");
                if ((value == null)||(!value.equals(getAccountMemo()))) {
                    setAccountMemo(((String) value));
                }
            }
            if (values.containsKey("CustomerHeadOffice")) {
                final Object value = values.remove("CustomerHeadOffice");
                if ((value == null)||(!value.equals(getHeadOffice()))) {
                    setHeadOffice(((String) value));
                }
            }
            if (values.containsKey("CustomerSupplierClearingIsUsed")) {
                final Object value = values.remove("CustomerSupplierClearingIsUsed");
                if ((value == null)||(!value.equals(getClearingWithVendor()))) {
                    setClearingWithVendor(((Boolean) value));
                }
            }
            if (values.containsKey("HouseBank")) {
                final Object value = values.remove("HouseBank");
                if ((value == null)||(!value.equals(getHouseBank()))) {
                    setHouseBank(((String) value));
                }
            }
            if (values.containsKey("InterestCalculationCode")) {
                final Object value = values.remove("InterestCalculationCode");
                if ((value == null)||(!value.equals(getInterestIndicator()))) {
                    setInterestIndicator(((String) value));
                }
            }
            if (values.containsKey("InterestCalculationDate")) {
                final Object value = values.remove("InterestCalculationDate");
                if ((value == null)||(!value.equals(getLastKeyDate()))) {
                    setLastKeyDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("IntrstCalcFrequencyInMonths")) {
                final Object value = values.remove("IntrstCalcFrequencyInMonths");
                if ((value == null)||(!value.equals(getIntCalcFreq()))) {
                    setIntCalcFreq(((String) value));
                }
            }
            if (values.containsKey("IsToBeLocallyProcessed")) {
                final Object value = values.remove("IsToBeLocallyProcessed");
                if ((value == null)||(!value.equals(getLocalProcessing()))) {
                    setLocalProcessing(((Boolean) value));
                }
            }
            if (values.containsKey("ItemIsToBePaidSeparately")) {
                final Object value = values.remove("ItemIsToBePaidSeparately");
                if ((value == null)||(!value.equals(getIndividualPayment()))) {
                    setIndividualPayment(((Boolean) value));
                }
            }
            if (values.containsKey("LayoutSortingRule")) {
                final Object value = values.remove("LayoutSortingRule");
                if ((value == null)||(!value.equals(getSortKey()))) {
                    setSortKey(((String) value));
                }
            }
            if (values.containsKey("PaymentBlockingReason")) {
                final Object value = values.remove("PaymentBlockingReason");
                if ((value == null)||(!value.equals(getPaymentBlock()))) {
                    setPaymentBlock(((String) value));
                }
            }
            if (values.containsKey("PaymentMethodsList")) {
                final Object value = values.remove("PaymentMethodsList");
                if ((value == null)||(!value.equals(getPaymentMethods()))) {
                    setPaymentMethods(((String) value));
                }
            }
            if (values.containsKey("PaymentReason")) {
                final Object value = values.remove("PaymentReason");
                if ((value == null)||(!value.equals(getPaymentReason()))) {
                    setPaymentReason(((String) value));
                }
            }
            if (values.containsKey("PaymentTerms")) {
                final Object value = values.remove("PaymentTerms");
                if ((value == null)||(!value.equals(getTermsOfPayment()))) {
                    setTermsOfPayment(((String) value));
                }
            }
            if (values.containsKey("PaytAdviceIsSentbyEDI")) {
                final Object value = values.remove("PaytAdviceIsSentbyEDI");
                if ((value == null)||(!value.equals(getPmntAdviceByEDI()))) {
                    setPmntAdviceByEDI(((Boolean) value));
                }
            }
            if (values.containsKey("PhysicalInventoryBlockInd")) {
                final Object value = values.remove("PhysicalInventoryBlockInd");
                if ((value == null)||(!value.equals(getCocodePostblock()))) {
                    setCocodePostblock(((Boolean) value));
                }
            }
            if (values.containsKey("ReconciliationAccount")) {
                final Object value = values.remove("ReconciliationAccount");
                if ((value == null)||(!value.equals(getReconciliationAcct()))) {
                    setReconciliationAcct(((String) value));
                }
            }
            if (values.containsKey("RecordPaymentHistoryIndicator")) {
                final Object value = values.remove("RecordPaymentHistoryIndicator");
                if ((value == null)||(!value.equals(getRecordPmntHistory()))) {
                    setRecordPmntHistory(((Boolean) value));
                }
            }
            if (values.containsKey("UserAtCustomer")) {
                final Object value = values.remove("UserAtCustomer");
                if ((value == null)||(!value.equals(getUserAtCustomer()))) {
                    setUserAtCustomer(((String) value));
                }
            }
            if (values.containsKey("DeletionIndicator")) {
                final Object value = values.remove("DeletionIndicator");
                if ((value == null)||(!value.equals(getCoCdeDeletionFlag()))) {
                    setCoCdeDeletionFlag(((Boolean) value));
                }
            }
            if (values.containsKey("CashPlanningGroup")) {
                final Object value = values.remove("CashPlanningGroup");
                if ((value == null)||(!value.equals(getPlanningGroup()))) {
                    setPlanningGroup(((String) value));
                }
            }
            if (values.containsKey("KnownOrNegotiatedLeave")) {
                final Object value = values.remove("KnownOrNegotiatedLeave");
                if ((value == null)||(!value.equals(getKnownNegotiatLeave()))) {
                    setKnownNegotiatLeave(((String) value));
                }
            }
            if (values.containsKey("ValueAdjustmentKey")) {
                final Object value = values.remove("ValueAdjustmentKey");
                if ((value == null)||(!value.equals(getValueAdjustment()))) {
                    setValueAdjustment(((String) value));
                }
            }
            if (values.containsKey("CustomerAccountGroup")) {
                final Object value = values.remove("CustomerAccountGroup");
                if ((value == null)||(!value.equals(getAccountGroup()))) {
                    setAccountGroup(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("to_CompanyText")) {
                final Object value = (values).remove("to_CompanyText");
                if (value instanceof Iterable) {
                    if (toCompanyText == null) {
                        toCompanyText = Lists.newArrayList();
                    } else {
                        toCompanyText = Lists.newArrayList(toCompanyText);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        CustomerCompanyText entity;
                        if (toCompanyText.size()>i) {
                            entity = toCompanyText.get(i);
                        } else {
                            entity = new CustomerCompanyText();
                            toCompanyText.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("to_CustomerDunning")) {
                final Object value = (values).remove("to_CustomerDunning");
                if (value instanceof Iterable) {
                    if (toCustomerDunning == null) {
                        toCustomerDunning = Lists.newArrayList();
                    } else {
                        toCustomerDunning = Lists.newArrayList(toCustomerDunning);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        CustomerDunning entity;
                        if (toCustomerDunning.size()>i) {
                            entity = toCustomerDunning.get(i);
                        } else {
                            entity = new CustomerDunning();
                            toCustomerDunning.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("to_WithHoldingTax")) {
                final Object value = (values).remove("to_WithHoldingTax");
                if (value instanceof Iterable) {
                    if (toWithHoldingTax == null) {
                        toWithHoldingTax = Lists.newArrayList();
                    } else {
                        toWithHoldingTax = Lists.newArrayList(toWithHoldingTax);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        WithholdingTax entity;
                        if (toWithHoldingTax.size()>i) {
                            entity = toWithHoldingTax.get(i);
                        } else {
                            entity = new WithholdingTax();
                            toWithHoldingTax.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >CustomerCompanyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new CustomerCompanyField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >CustomerCompanyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new CustomerCompanyField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public Destination getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final Destination destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.sap.cloud.sdk.tutorial.datamodel.odata.services.BusinessPartnerService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toCompanyText!= null) {
            (values).put("to_CompanyText", toCompanyText);
        }
        if (toCustomerDunning!= null) {
            (values).put("to_CustomerDunning", toCustomerDunning);
        }
        if (toWithHoldingTax!= null) {
            (values).put("to_WithHoldingTax", toWithHoldingTax);
        }
        return values;
    }

    /**
     * Fetches the <b>CustomerCompanyText</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>CustomerCompanyText</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CustomerCompanyText> fetchCompanyText() {
        return fetchFieldAsList("to_CompanyText", CustomerCompanyText.class);
    }

    /**
     * Retrieval of associated <b>CustomerCompanyText</b> entities (one to many). This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>CustomerCompanyText</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CustomerCompanyText> getCompanyTextOrFetch() {
        if (toCompanyText == null) {
            toCompanyText = fetchCompanyText();
        }
        return toCompanyText;
    }

    /**
     * Retrieval of associated <b>CustomerCompanyText</b> entities (one to many). This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property for an entity <b>CustomerCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_CompanyText</b> is already loaded, the result will contain the <b>CustomerCompanyText</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<CustomerCompanyText>> getCompanyTextIfPresent() {
        return Option.of(toCompanyText);
    }

    /**
     * Overwrites the list of associated <b>CustomerCompanyText</b> entities for the loaded navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>CustomerCompanyText</b> entities.
     */
    public void setCompanyText(
        @Nonnull
        final List<CustomerCompanyText> value) {
        if (toCompanyText == null) {
            toCompanyText = Lists.newArrayList();
        }
        toCompanyText.clear();
        toCompanyText.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>CustomerCompanyText</b> entities. This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>CustomerCompanyText</b> entities.
     */
    public void addCompanyText(CustomerCompanyText... entity) {
        if (toCompanyText == null) {
            toCompanyText = Lists.newArrayList();
        }
        toCompanyText.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>CustomerDunning</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_CustomerDunning</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>CustomerDunning</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CustomerDunning> fetchCustomerDunning() {
        return fetchFieldAsList("to_CustomerDunning", CustomerDunning.class);
    }

    /**
     * Retrieval of associated <b>CustomerDunning</b> entities (one to many). This corresponds to the OData navigation property <b>to_CustomerDunning</b>.
     * <p>
     * If the navigation property <b>to_CustomerDunning</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>CustomerDunning</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CustomerDunning> getCustomerDunningOrFetch() {
        if (toCustomerDunning == null) {
            toCustomerDunning = fetchCustomerDunning();
        }
        return toCustomerDunning;
    }

    /**
     * Retrieval of associated <b>CustomerDunning</b> entities (one to many). This corresponds to the OData navigation property <b>to_CustomerDunning</b>.
     * <p>
     * If the navigation property for an entity <b>CustomerCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_CustomerDunning</b> is already loaded, the result will contain the <b>CustomerDunning</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<CustomerDunning>> getCustomerDunningIfPresent() {
        return Option.of(toCustomerDunning);
    }

    /**
     * Overwrites the list of associated <b>CustomerDunning</b> entities for the loaded navigation property <b>to_CustomerDunning</b>.
     * <p>
     * If the navigation property <b>to_CustomerDunning</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>CustomerDunning</b> entities.
     */
    public void setCustomerDunning(
        @Nonnull
        final List<CustomerDunning> value) {
        if (toCustomerDunning == null) {
            toCustomerDunning = Lists.newArrayList();
        }
        toCustomerDunning.clear();
        toCustomerDunning.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>CustomerDunning</b> entities. This corresponds to the OData navigation property <b>to_CustomerDunning</b>.
     * <p>
     * If the navigation property <b>to_CustomerDunning</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>CustomerDunning</b> entities.
     */
    public void addCustomerDunning(CustomerDunning... entity) {
        if (toCustomerDunning == null) {
            toCustomerDunning = Lists.newArrayList();
        }
        toCustomerDunning.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>WithholdingTax</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_WithHoldingTax</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>WithholdingTax</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<WithholdingTax> fetchWithHoldingTax() {
        return fetchFieldAsList("to_WithHoldingTax", WithholdingTax.class);
    }

    /**
     * Retrieval of associated <b>WithholdingTax</b> entities (one to many). This corresponds to the OData navigation property <b>to_WithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_WithHoldingTax</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>WithholdingTax</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<WithholdingTax> getWithHoldingTaxOrFetch() {
        if (toWithHoldingTax == null) {
            toWithHoldingTax = fetchWithHoldingTax();
        }
        return toWithHoldingTax;
    }

    /**
     * Retrieval of associated <b>WithholdingTax</b> entities (one to many). This corresponds to the OData navigation property <b>to_WithHoldingTax</b>.
     * <p>
     * If the navigation property for an entity <b>CustomerCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_WithHoldingTax</b> is already loaded, the result will contain the <b>WithholdingTax</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<WithholdingTax>> getWithHoldingTaxIfPresent() {
        return Option.of(toWithHoldingTax);
    }

    /**
     * Overwrites the list of associated <b>WithholdingTax</b> entities for the loaded navigation property <b>to_WithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_WithHoldingTax</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>WithholdingTax</b> entities.
     */
    public void setWithHoldingTax(
        @Nonnull
        final List<WithholdingTax> value) {
        if (toWithHoldingTax == null) {
            toWithHoldingTax = Lists.newArrayList();
        }
        toWithHoldingTax.clear();
        toWithHoldingTax.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>WithholdingTax</b> entities. This corresponds to the OData navigation property <b>to_WithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_WithHoldingTax</b> of a queried <b>CustomerCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>WithholdingTax</b> entities.
     */
    public void addWithHoldingTax(WithholdingTax... entity) {
        if (toWithHoldingTax == null) {
            toWithHoldingTax = Lists.newArrayList();
        }
        toWithHoldingTax.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of CustomerCompany instances.
     * 
     */
    public final static class CustomerCompanyBuilder {

        private List<CustomerCompanyText> toCompanyText = Lists.newArrayList();
        private List<CustomerDunning> toCustomerDunning = Lists.newArrayList();
        private List<WithholdingTax> toWithHoldingTax = Lists.newArrayList();

        private CustomerCompany.CustomerCompanyBuilder toCompanyText(final List<CustomerCompanyText> value) {
            toCompanyText.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_CompanyText</b> for <b>CustomerCompany</b> to multiple <b>CustomerCompanyText</b>.
         * 
         * @param value
         *     The CustomerCompanyTexts to build this CustomerCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public CustomerCompany.CustomerCompanyBuilder companyText(CustomerCompanyText... value) {
            return toCompanyText(Lists.newArrayList(value));
        }

        private CustomerCompany.CustomerCompanyBuilder toCustomerDunning(final List<CustomerDunning> value) {
            toCustomerDunning.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_CustomerDunning</b> for <b>CustomerCompany</b> to multiple <b>CustomerDunning</b>.
         * 
         * @param value
         *     The CustomerDunnings to build this CustomerCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public CustomerCompany.CustomerCompanyBuilder customerDunning(CustomerDunning... value) {
            return toCustomerDunning(Lists.newArrayList(value));
        }

        private CustomerCompany.CustomerCompanyBuilder toWithHoldingTax(final List<WithholdingTax> value) {
            toWithHoldingTax.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_WithHoldingTax</b> for <b>CustomerCompany</b> to multiple <b>WithholdingTax</b>.
         * 
         * @param value
         *     The WithholdingTaxs to build this CustomerCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public CustomerCompany.CustomerCompanyBuilder withHoldingTax(WithholdingTax... value) {
            return toWithHoldingTax(Lists.newArrayList(value));
        }

    }

}
