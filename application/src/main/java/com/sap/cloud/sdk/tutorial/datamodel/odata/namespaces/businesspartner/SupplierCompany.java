
/*
 * Generated by OData VDM code generator of SAP Cloud SDK in version 5.1.0
 */

package com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.sap.cloud.sdk.cloudplatform.connectivity.Destination;
import com.sap.cloud.sdk.datamodel.odata.client.exception.ODataException;
import com.sap.cloud.sdk.datamodel.odata.helper.VdmEntity;
import com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataField;
import com.sap.cloud.sdk.s4hana.datamodel.odata.annotation.Key;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.field.SupplierCompanyField;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.link.SupplierCompanyLink;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.link.SupplierCompanyOneToOneLink;
import com.sap.cloud.sdk.tutorial.datamodel.odata.namespaces.businesspartner.selectable.SupplierCompanySelectable;
import com.sap.cloud.sdk.typeconverter.TypeConverter;
import io.vavr.control.Option;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;


/**
 * Supplier Company<p></p><p>Original entity name from the Odata EDM: <b>A_SupplierCompanyType</b></p>
 * 
 */
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString(doNotUseGetters = true, callSuper = true)
@EqualsAndHashCode(doNotUseGetters = true, callSuper = true)
@JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataVdmEntityAdapterFactory.class)
public class SupplierCompany
    extends VdmEntity<SupplierCompany>
{

    /**
     * Selector for all available fields of SupplierCompany.
     * 
     */
    public final static SupplierCompanySelectable ALL_FIELDS = () -> "*";
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Supplier</b></p>
     * 
     * @return
     *     Account Number of Supplier
     */
    @Key
    @SerializedName("Supplier")
    @JsonProperty("Supplier")
    @Nullable
    @ODataField(odataName = "Supplier")
    private String supplier;
    /**
     * Use with available fluent helpers to apply the <b>Supplier</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> SUPPLIER = new SupplierCompanyField<String>("Supplier");
    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CompanyCode</b></p>
     * 
     * @return
     *     Company Code
     */
    @Key
    @SerializedName("CompanyCode")
    @JsonProperty("CompanyCode")
    @Nullable
    @ODataField(odataName = "CompanyCode")
    private String companyCode;
    /**
     * Use with available fluent helpers to apply the <b>CompanyCode</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> COMPANY_CODE = new SupplierCompanyField<String>("CompanyCode");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>AuthorizationGroup</b></p>
     * 
     * @return
     *     Authorization Group
     */
    @SerializedName("AuthorizationGroup")
    @JsonProperty("AuthorizationGroup")
    @Nullable
    @ODataField(odataName = "AuthorizationGroup")
    private String authorization;
    /**
     * Use with available fluent helpers to apply the <b>AuthorizationGroup</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> AUTHORIZATION = new SupplierCompanyField<String>("AuthorizationGroup");
    /**
     * Constraints: Not nullable, Maximum length: 25 <p>Original property name from the Odata EDM: <b>CompanyCodeName</b></p>
     * 
     * @return
     *     Name of Company Code or Company
     */
    @SerializedName("CompanyCodeName")
    @JsonProperty("CompanyCodeName")
    @Nullable
    @ODataField(odataName = "CompanyCodeName")
    private String companyName;
    /**
     * Use with available fluent helpers to apply the <b>CompanyCodeName</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> COMPANY_NAME = new SupplierCompanyField<String>("CompanyCodeName");
    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>PaymentBlockingReason</b></p>
     * 
     * @return
     *     Block Key for Payment
     */
    @SerializedName("PaymentBlockingReason")
    @JsonProperty("PaymentBlockingReason")
    @Nullable
    @ODataField(odataName = "PaymentBlockingReason")
    private String paymentBlock;
    /**
     * Use with available fluent helpers to apply the <b>PaymentBlockingReason</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> PAYMENT_BLOCK = new SupplierCompanyField<String>("PaymentBlockingReason");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>SupplierIsBlockedForPosting</b></p>
     * 
     * @return
     *     Posting block for company code
     */
    @SerializedName("SupplierIsBlockedForPosting")
    @JsonProperty("SupplierIsBlockedForPosting")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "SupplierIsBlockedForPosting")
    private Boolean cocodePostblock;
    /**
     * Use with available fluent helpers to apply the <b>SupplierIsBlockedForPosting</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> COCODE_POSTBLOCK = new SupplierCompanyField<Boolean>("SupplierIsBlockedForPosting");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>AccountingClerk</b></p>
     * 
     * @return
     *     Accounting Clerk Abbreviation
     */
    @SerializedName("AccountingClerk")
    @JsonProperty("AccountingClerk")
    @Nullable
    @ODataField(odataName = "AccountingClerk")
    private String clerkAbbrev;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerk</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> CLERK_ABBREV = new SupplierCompanyField<String>("AccountingClerk");
    /**
     * Constraints: Not nullable, Maximum length: 31 <p>Original property name from the Odata EDM: <b>AccountingClerkFaxNumber</b></p>
     * 
     * @return
     *     Accounting clerk's fax number at the customer/vendor
     */
    @SerializedName("AccountingClerkFaxNumber")
    @JsonProperty("AccountingClerkFaxNumber")
    @Nullable
    @ODataField(odataName = "AccountingClerkFaxNumber")
    private String acctgClerksFax;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerkFaxNumber</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ACCTG_CLERKS_FAX = new SupplierCompanyField<String>("AccountingClerkFaxNumber");
    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>AccountingClerkPhoneNumber</b></p>
     * 
     * @return
     *     Accounting clerk's telephone number at business partner
     */
    @SerializedName("AccountingClerkPhoneNumber")
    @JsonProperty("AccountingClerkPhoneNumber")
    @Nullable
    @ODataField(odataName = "AccountingClerkPhoneNumber")
    private String acctclerksTelno;
    /**
     * Use with available fluent helpers to apply the <b>AccountingClerkPhoneNumber</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ACCTCLERKS_TELNO = new SupplierCompanyField<String>("AccountingClerkPhoneNumber");
    /**
     * Constraints: Not nullable, Maximum length: 15 <p>Original property name from the Odata EDM: <b>SupplierClerk</b></p>
     * 
     * @return
     *     Clerk at vendor
     */
    @SerializedName("SupplierClerk")
    @JsonProperty("SupplierClerk")
    @Nullable
    @ODataField(odataName = "SupplierClerk")
    private String clerkAtVendor;
    /**
     * Use with available fluent helpers to apply the <b>SupplierClerk</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> CLERK_AT_VENDOR = new SupplierCompanyField<String>("SupplierClerk");
    /**
     * Constraints: Not nullable, Maximum length: 130 <p>Original property name from the Odata EDM: <b>SupplierClerkURL</b></p>
     * 
     * @return
     *     Internet address of partner company clerk
     */
    @SerializedName("SupplierClerkURL")
    @JsonProperty("SupplierClerkURL")
    @Nullable
    @ODataField(odataName = "SupplierClerkURL")
    private String clrksInternetAdd;
    /**
     * Use with available fluent helpers to apply the <b>SupplierClerkURL</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> CLRKS_INTERNET_ADD = new SupplierCompanyField<String>("SupplierClerkURL");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>PaymentMethodsList</b></p>
     * 
     * @return
     *     List of Respected Payment Methods
     */
    @SerializedName("PaymentMethodsList")
    @JsonProperty("PaymentMethodsList")
    @Nullable
    @ODataField(odataName = "PaymentMethodsList")
    private String paymentMethods;
    /**
     * Use with available fluent helpers to apply the <b>PaymentMethodsList</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> PAYMENT_METHODS = new SupplierCompanyField<String>("PaymentMethodsList");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentReason</b></p>
     * 
     * @return
     *     Payment Reason
     */
    @SerializedName("PaymentReason")
    @JsonProperty("PaymentReason")
    @Nullable
    @ODataField(odataName = "PaymentReason")
    private String paymentReason;
    /**
     * Use with available fluent helpers to apply the <b>PaymentReason</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> PAYMENT_REASON = new SupplierCompanyField<String>("PaymentReason");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentTerms</b></p>
     * 
     * @return
     *     Key for Terms of Payment
     */
    @SerializedName("PaymentTerms")
    @JsonProperty("PaymentTerms")
    @Nullable
    @ODataField(odataName = "PaymentTerms")
    private String termsOfPayment;
    /**
     * Use with available fluent helpers to apply the <b>PaymentTerms</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> TERMS_OF_PAYMENT = new SupplierCompanyField<String>("PaymentTerms");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ClearCustomerSupplier</b></p>
     * 
     * @return
     *     Indicator: Clearing between customer and vendor?
     */
    @SerializedName("ClearCustomerSupplier")
    @JsonProperty("ClearCustomerSupplier")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "ClearCustomerSupplier")
    private Boolean clearingWithCust;
    /**
     * Use with available fluent helpers to apply the <b>ClearCustomerSupplier</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> CLEARING_WITH_CUST = new SupplierCompanyField<Boolean>("ClearCustomerSupplier");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeLocallyProcessed</b></p>
     * 
     * @return
     *     Indicator: Local Processing?
     */
    @SerializedName("IsToBeLocallyProcessed")
    @JsonProperty("IsToBeLocallyProcessed")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "IsToBeLocallyProcessed")
    private Boolean localProcessing;
    /**
     * Use with available fluent helpers to apply the <b>IsToBeLocallyProcessed</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> LOCAL_PROCESSING = new SupplierCompanyField<Boolean>("IsToBeLocallyProcessed");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ItemIsToBePaidSeparately</b></p>
     * 
     * @return
     *     Indicator: Pay All Items Separately?
     */
    @SerializedName("ItemIsToBePaidSeparately")
    @JsonProperty("ItemIsToBePaidSeparately")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "ItemIsToBePaidSeparately")
    private Boolean individualPayment;
    /**
     * Use with available fluent helpers to apply the <b>ItemIsToBePaidSeparately</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> INDIVIDUAL_PAYMENT = new SupplierCompanyField<Boolean>("ItemIsToBePaidSeparately");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PaymentIsToBeSentByEDI</b></p>
     * 
     * @return
     *     Indicator: Send Payment Advices by EDI
     */
    @SerializedName("PaymentIsToBeSentByEDI")
    @JsonProperty("PaymentIsToBeSentByEDI")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "PaymentIsToBeSentByEDI")
    private Boolean pmntAdviceByEDI;
    /**
     * Use with available fluent helpers to apply the <b>PaymentIsToBeSentByEDI</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> PMNT_ADVICE_BY_EDI = new SupplierCompanyField<Boolean>("PaymentIsToBeSentByEDI");
    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>HouseBank</b></p>
     * 
     * @return
     *     Short Key for a House Bank
     */
    @SerializedName("HouseBank")
    @JsonProperty("HouseBank")
    @Nullable
    @ODataField(odataName = "HouseBank")
    private String houseBank;
    /**
     * Use with available fluent helpers to apply the <b>HouseBank</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> HOUSE_BANK = new SupplierCompanyField<String>("HouseBank");
    /**
     * Constraints: Not nullable, Precision: 3, Scale: 0 <p>Original property name from the Odata EDM: <b>CheckPaidDurationInDays</b></p>
     * 
     * @return
     *     Probable Time Until Check Is Paid
     */
    @SerializedName("CheckPaidDurationInDays")
    @JsonProperty("CheckPaidDurationInDays")
    @Nullable
    @ODataField(odataName = "CheckPaidDurationInDays")
    private BigDecimal checkCashingTime;
    /**
     * Use with available fluent helpers to apply the <b>CheckPaidDurationInDays</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<BigDecimal> CHECK_CASHING_TIME = new SupplierCompanyField<BigDecimal>("CheckPaidDurationInDays");
    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>Currency</b></p>
     * 
     * @return
     *     Currency Key
     */
    @SerializedName("Currency")
    @JsonProperty("Currency")
    @Nullable
    @ODataField(odataName = "Currency")
    private String currency;
    /**
     * Use with available fluent helpers to apply the <b>Currency</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> CURRENCY = new SupplierCompanyField<String>("Currency");
    /**
     * Constraints: Not nullable, Precision: 14, Scale: 3 <p>Original property name from the Odata EDM: <b>BillOfExchLmtAmtInCoCodeCrcy</b></p>
     * 
     * @return
     *     Bill of Exchange Limit (in Local Currency)
     */
    @SerializedName("BillOfExchLmtAmtInCoCodeCrcy")
    @JsonProperty("BillOfExchLmtAmtInCoCodeCrcy")
    @Nullable
    @ODataField(odataName = "BillOfExchLmtAmtInCoCodeCrcy")
    private BigDecimal billExLimit;
    /**
     * Use with available fluent helpers to apply the <b>BillOfExchLmtAmtInCoCodeCrcy</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<BigDecimal> BILL_EX_LIMIT = new SupplierCompanyField<BigDecimal>("BillOfExchLmtAmtInCoCodeCrcy");
    /**
     * Constraints: Not nullable, Maximum length: 12 <p>Original property name from the Odata EDM: <b>SupplierClerkIDBySupplier</b></p>
     * 
     * @return
     *     Our account number with the vendor
     */
    @SerializedName("SupplierClerkIDBySupplier")
    @JsonProperty("SupplierClerkIDBySupplier")
    @Nullable
    @ODataField(odataName = "SupplierClerkIDBySupplier")
    private String accountWithVendor;
    /**
     * Use with available fluent helpers to apply the <b>SupplierClerkIDBySupplier</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ACCOUNT_WITH_VENDOR = new SupplierCompanyField<String>("SupplierClerkIDBySupplier");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>ReconciliationAccount</b></p>
     * 
     * @return
     *     Reconciliation Account in General Ledger
     */
    @SerializedName("ReconciliationAccount")
    @JsonProperty("ReconciliationAccount")
    @Nullable
    @ODataField(odataName = "ReconciliationAccount")
    private String reconciliationAcct;
    /**
     * Use with available fluent helpers to apply the <b>ReconciliationAccount</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> RECONCILIATION_ACCT = new SupplierCompanyField<String>("ReconciliationAccount");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>InterestCalculationCode</b></p>
     * 
     * @return
     *     Interest Indicator
     */
    @SerializedName("InterestCalculationCode")
    @JsonProperty("InterestCalculationCode")
    @Nullable
    @ODataField(odataName = "InterestCalculationCode")
    private String interestIndicator;
    /**
     * Use with available fluent helpers to apply the <b>InterestCalculationCode</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> INTEREST_INDICATOR = new SupplierCompanyField<String>("InterestCalculationCode");
    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>InterestCalculationDate</b></p>
     * 
     * @return
     *     Key Date of Last Interest Calculation
     */
    @SerializedName("InterestCalculationDate")
    @JsonProperty("InterestCalculationDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "InterestCalculationDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime lastKeyDate;
    /**
     * Use with available fluent helpers to apply the <b>InterestCalculationDate</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<LocalDateTime> LAST_KEY_DATE = new SupplierCompanyField<LocalDateTime>("InterestCalculationDate");
    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>IntrstCalcFrequencyInMonths</b></p>
     * 
     * @return
     *     Interest Calculation Frequency in Months
     */
    @SerializedName("IntrstCalcFrequencyInMonths")
    @JsonProperty("IntrstCalcFrequencyInMonths")
    @Nullable
    @ODataField(odataName = "IntrstCalcFrequencyInMonths")
    private String intCalcFreq;
    /**
     * Use with available fluent helpers to apply the <b>IntrstCalcFrequencyInMonths</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> INT_CALC_FREQ = new SupplierCompanyField<String>("IntrstCalcFrequencyInMonths");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>SupplierHeadOffice</b></p>
     * 
     * @return
     *     Head Office Account Number
     */
    @SerializedName("SupplierHeadOffice")
    @JsonProperty("SupplierHeadOffice")
    @Nullable
    @ODataField(odataName = "SupplierHeadOffice")
    private String headOffice;
    /**
     * Use with available fluent helpers to apply the <b>SupplierHeadOffice</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> HEAD_OFFICE = new SupplierCompanyField<String>("SupplierHeadOffice");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>AlternativePayee</b></p>
     * 
     * @return
     *     Account number of the alternative payee
     */
    @SerializedName("AlternativePayee")
    @JsonProperty("AlternativePayee")
    @Nullable
    @ODataField(odataName = "AlternativePayee")
    private String alternativePayee;
    /**
     * Use with available fluent helpers to apply the <b>AlternativePayee</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ALTERNATIVE_PAYEE = new SupplierCompanyField<String>("AlternativePayee");
    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>LayoutSortingRule</b></p>
     * 
     * @return
     *     Key for Sorting According to Assignment Numbers
     */
    @SerializedName("LayoutSortingRule")
    @JsonProperty("LayoutSortingRule")
    @Nullable
    @ODataField(odataName = "LayoutSortingRule")
    private String sortKey;
    /**
     * Use with available fluent helpers to apply the <b>LayoutSortingRule</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> SORT_KEY = new SupplierCompanyField<String>("LayoutSortingRule");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>APARToleranceGroup</b></p>
     * 
     * @return
     *     Tolerance Group for Business Partner/G/L Account
     */
    @SerializedName("APARToleranceGroup")
    @JsonProperty("APARToleranceGroup")
    @Nullable
    @ODataField(odataName = "APARToleranceGroup")
    private String toleranceGroup;
    /**
     * Use with available fluent helpers to apply the <b>APARToleranceGroup</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> TOLERANCE_GROUP = new SupplierCompanyField<String>("APARToleranceGroup");
    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>SupplierCertificationDate</b></p>
     * 
     * @return
     *     Certification Date
     */
    @SerializedName("SupplierCertificationDate")
    @JsonProperty("SupplierCertificationDate")
    @Nullable
    @JsonSerialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeSerializer.class)
    @JsonDeserialize(using = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.JacksonLocalDateTimeDeserializer.class)
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeAdapter.class)
    @ODataField(odataName = "SupplierCertificationDate", converter = com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.LocalDateTimeCalendarConverter.class)
    private LocalDateTime certificationDate;
    /**
     * Use with available fluent helpers to apply the <b>SupplierCertificationDate</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<LocalDateTime> CERTIFICATION_DATE = new SupplierCompanyField<LocalDateTime>("SupplierCertificationDate");
    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>SupplierAccountNote</b></p>
     * 
     * @return
     *     Memo
     */
    @SerializedName("SupplierAccountNote")
    @JsonProperty("SupplierAccountNote")
    @Nullable
    @ODataField(odataName = "SupplierAccountNote")
    private String accountMemo;
    /**
     * Use with available fluent helpers to apply the <b>SupplierAccountNote</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ACCOUNT_MEMO = new SupplierCompanyField<String>("SupplierAccountNote");
    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>WithholdingTaxCountry</b></p>
     * 
     * @return
     *     Withholding Tax Country/Region Key
     */
    @SerializedName("WithholdingTaxCountry")
    @JsonProperty("WithholdingTaxCountry")
    @Nullable
    @ODataField(odataName = "WithholdingTaxCountry")
    private String wTaxCRKey;
    /**
     * Use with available fluent helpers to apply the <b>WithholdingTaxCountry</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> W_TAX_CR_KEY = new SupplierCompanyField<String>("WithholdingTaxCountry");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>DeletionIndicator</b></p>
     * 
     * @return
     *     Deletion Flag for Master Record (Company Code Level)
     */
    @SerializedName("DeletionIndicator")
    @JsonProperty("DeletionIndicator")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "DeletionIndicator")
    private Boolean coCdeDeletionFlag;
    /**
     * Use with available fluent helpers to apply the <b>DeletionIndicator</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> CO_CDE_DELETION_FLAG = new SupplierCompanyField<Boolean>("DeletionIndicator");
    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CashPlanningGroup</b></p>
     * 
     * @return
     *     Planning Group
     */
    @SerializedName("CashPlanningGroup")
    @JsonProperty("CashPlanningGroup")
    @Nullable
    @ODataField(odataName = "CashPlanningGroup")
    private String planningGroup;
    /**
     * Use with available fluent helpers to apply the <b>CashPlanningGroup</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> PLANNING_GROUP = new SupplierCompanyField<String>("CashPlanningGroup");
    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeCheckedForDuplicates</b></p>
     * 
     * @return
     *     Check Flag for Double Invoices or Credit Memos
     */
    @SerializedName("IsToBeCheckedForDuplicates")
    @JsonProperty("IsToBeCheckedForDuplicates")
    @Nullable
    @JsonAdapter(com.sap.cloud.sdk.s4hana.datamodel.odata.adapter.ODataBooleanAdapter.class)
    @ODataField(odataName = "IsToBeCheckedForDuplicates")
    private Boolean checkDoubleInvoice;
    /**
     * Use with available fluent helpers to apply the <b>IsToBeCheckedForDuplicates</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<Boolean> CHECK_DOUBLE_INVOICE = new SupplierCompanyField<Boolean>("IsToBeCheckedForDuplicates");
    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>MinorityGroup</b></p>
     * 
     * @return
     *     Minority Indicator
     */
    @SerializedName("MinorityGroup")
    @JsonProperty("MinorityGroup")
    @Nullable
    @ODataField(odataName = "MinorityGroup")
    private String minorityIndicator;
    /**
     * Use with available fluent helpers to apply the <b>MinorityGroup</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> MINORITY_INDICATOR = new SupplierCompanyField<String>("MinorityGroup");
    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>SupplierAccountGroup</b></p>
     * 
     * @return
     *     Supplier Account Group
     */
    @SerializedName("SupplierAccountGroup")
    @JsonProperty("SupplierAccountGroup")
    @Nullable
    @ODataField(odataName = "SupplierAccountGroup")
    private String accountGroup;
    /**
     * Use with available fluent helpers to apply the <b>SupplierAccountGroup</b> field to query operations.
     * 
     */
    public final static SupplierCompanyField<String> ACCOUNT_GROUP = new SupplierCompanyField<String>("SupplierAccountGroup");
    /**
     * Navigation property <b>to_CompanyText</b> for <b>SupplierCompany</b> to multiple <b>SupplierCompanyText</b>.
     * 
     */
    @SerializedName("to_CompanyText")
    @JsonProperty("to_CompanyText")
    @ODataField(odataName = "to_CompanyText")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<SupplierCompanyText> toCompanyText;
    /**
     * Navigation property <b>to_Supplier</b> for <b>SupplierCompany</b> to single <b>Supplier</b>.
     * 
     */
    @SerializedName("to_Supplier")
    @JsonProperty("to_Supplier")
    @ODataField(odataName = "to_Supplier")
    @Nullable
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private Supplier toSupplier;
    /**
     * Navigation property <b>to_SupplierDunning</b> for <b>SupplierCompany</b> to multiple <b>SupplierDunning</b>.
     * 
     */
    @SerializedName("to_SupplierDunning")
    @JsonProperty("to_SupplierDunning")
    @ODataField(odataName = "to_SupplierDunning")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<SupplierDunning> toSupplierDunning;
    /**
     * Navigation property <b>to_SupplierWithHoldingTax</b> for <b>SupplierCompany</b> to multiple <b>CompanyWithholdingTax</b>.
     * 
     */
    @SerializedName("to_SupplierWithHoldingTax")
    @JsonProperty("to_SupplierWithHoldingTax")
    @ODataField(odataName = "to_SupplierWithHoldingTax")
    @Getter(AccessLevel.NONE)
    @Setter(AccessLevel.NONE)
    private List<CompanyWithholdingTax> toSupplierWithHoldingTax;
    /**
     * Use with available fluent helpers to apply the <b>to_CompanyText</b> navigation property to query operations.
     * 
     */
    public final static SupplierCompanyLink<SupplierCompanyText> TO_COMPANY_TEXT = new SupplierCompanyLink<SupplierCompanyText>("to_CompanyText");
    /**
     * Use with available fluent helpers to apply the <b>to_Supplier</b> navigation property to query operations.
     * 
     */
    public final static SupplierCompanyOneToOneLink<Supplier> TO_SUPPLIER = new SupplierCompanyOneToOneLink<Supplier>("to_Supplier");
    /**
     * Use with available fluent helpers to apply the <b>to_SupplierDunning</b> navigation property to query operations.
     * 
     */
    public final static SupplierCompanyLink<SupplierDunning> TO_SUPPLIER_DUNNING = new SupplierCompanyLink<SupplierDunning>("to_SupplierDunning");
    /**
     * Use with available fluent helpers to apply the <b>to_SupplierWithHoldingTax</b> navigation property to query operations.
     * 
     */
    public final static SupplierCompanyLink<CompanyWithholdingTax> TO_SUPPLIER_WITH_HOLDING_TAX = new SupplierCompanyLink<CompanyWithholdingTax>("to_SupplierWithHoldingTax");

    @Nonnull
    @Override
    public Class<SupplierCompany> getType() {
        return SupplierCompany.class;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Supplier</b></p>
     * 
     * @param supplier
     *     Account Number of Supplier
     */
    public void setSupplier(
        @Nullable
        final String supplier) {
        rememberChangedField("Supplier", this.supplier);
        this.supplier = supplier;
    }

    /**
     * (Key Field) Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>CompanyCode</b></p>
     * 
     * @param companyCode
     *     Company Code
     */
    public void setCompanyCode(
        @Nullable
        final String companyCode) {
        rememberChangedField("CompanyCode", this.companyCode);
        this.companyCode = companyCode;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>AuthorizationGroup</b></p>
     * 
     * @param authorization
     *     Authorization Group
     */
    public void setAuthorization(
        @Nullable
        final String authorization) {
        rememberChangedField("AuthorizationGroup", this.authorization);
        this.authorization = authorization;
    }

    /**
     * Constraints: Not nullable, Maximum length: 25 <p>Original property name from the Odata EDM: <b>CompanyCodeName</b></p>
     * 
     * @param companyName
     *     Name of Company Code or Company
     */
    public void setCompanyName(
        @Nullable
        final String companyName) {
        rememberChangedField("CompanyCodeName", this.companyName);
        this.companyName = companyName;
    }

    /**
     * Constraints: Not nullable, Maximum length: 1 <p>Original property name from the Odata EDM: <b>PaymentBlockingReason</b></p>
     * 
     * @param paymentBlock
     *     Block Key for Payment
     */
    public void setPaymentBlock(
        @Nullable
        final String paymentBlock) {
        rememberChangedField("PaymentBlockingReason", this.paymentBlock);
        this.paymentBlock = paymentBlock;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>SupplierIsBlockedForPosting</b></p>
     * 
     * @param cocodePostblock
     *     Posting block for company code
     */
    public void setCocodePostblock(
        @Nullable
        final Boolean cocodePostblock) {
        rememberChangedField("SupplierIsBlockedForPosting", this.cocodePostblock);
        this.cocodePostblock = cocodePostblock;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>AccountingClerk</b></p>
     * 
     * @param clerkAbbrev
     *     Accounting Clerk Abbreviation
     */
    public void setClerkAbbrev(
        @Nullable
        final String clerkAbbrev) {
        rememberChangedField("AccountingClerk", this.clerkAbbrev);
        this.clerkAbbrev = clerkAbbrev;
    }

    /**
     * Constraints: Not nullable, Maximum length: 31 <p>Original property name from the Odata EDM: <b>AccountingClerkFaxNumber</b></p>
     * 
     * @param acctgClerksFax
     *     Accounting clerk's fax number at the customer/vendor
     */
    public void setAcctgClerksFax(
        @Nullable
        final String acctgClerksFax) {
        rememberChangedField("AccountingClerkFaxNumber", this.acctgClerksFax);
        this.acctgClerksFax = acctgClerksFax;
    }

    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>AccountingClerkPhoneNumber</b></p>
     * 
     * @param acctclerksTelno
     *     Accounting clerk's telephone number at business partner
     */
    public void setAcctclerksTelno(
        @Nullable
        final String acctclerksTelno) {
        rememberChangedField("AccountingClerkPhoneNumber", this.acctclerksTelno);
        this.acctclerksTelno = acctclerksTelno;
    }

    /**
     * Constraints: Not nullable, Maximum length: 15 <p>Original property name from the Odata EDM: <b>SupplierClerk</b></p>
     * 
     * @param clerkAtVendor
     *     Clerk at vendor
     */
    public void setClerkAtVendor(
        @Nullable
        final String clerkAtVendor) {
        rememberChangedField("SupplierClerk", this.clerkAtVendor);
        this.clerkAtVendor = clerkAtVendor;
    }

    /**
     * Constraints: Not nullable, Maximum length: 130 <p>Original property name from the Odata EDM: <b>SupplierClerkURL</b></p>
     * 
     * @param clrksInternetAdd
     *     Internet address of partner company clerk
     */
    public void setClrksInternetAdd(
        @Nullable
        final String clrksInternetAdd) {
        rememberChangedField("SupplierClerkURL", this.clrksInternetAdd);
        this.clrksInternetAdd = clrksInternetAdd;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>PaymentMethodsList</b></p>
     * 
     * @param paymentMethods
     *     List of Respected Payment Methods
     */
    public void setPaymentMethods(
        @Nullable
        final String paymentMethods) {
        rememberChangedField("PaymentMethodsList", this.paymentMethods);
        this.paymentMethods = paymentMethods;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentReason</b></p>
     * 
     * @param paymentReason
     *     Payment Reason
     */
    public void setPaymentReason(
        @Nullable
        final String paymentReason) {
        rememberChangedField("PaymentReason", this.paymentReason);
        this.paymentReason = paymentReason;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>PaymentTerms</b></p>
     * 
     * @param termsOfPayment
     *     Key for Terms of Payment
     */
    public void setTermsOfPayment(
        @Nullable
        final String termsOfPayment) {
        rememberChangedField("PaymentTerms", this.termsOfPayment);
        this.termsOfPayment = termsOfPayment;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ClearCustomerSupplier</b></p>
     * 
     * @param clearingWithCust
     *     Indicator: Clearing between customer and vendor?
     */
    public void setClearingWithCust(
        @Nullable
        final Boolean clearingWithCust) {
        rememberChangedField("ClearCustomerSupplier", this.clearingWithCust);
        this.clearingWithCust = clearingWithCust;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeLocallyProcessed</b></p>
     * 
     * @param localProcessing
     *     Indicator: Local Processing?
     */
    public void setLocalProcessing(
        @Nullable
        final Boolean localProcessing) {
        rememberChangedField("IsToBeLocallyProcessed", this.localProcessing);
        this.localProcessing = localProcessing;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>ItemIsToBePaidSeparately</b></p>
     * 
     * @param individualPayment
     *     Indicator: Pay All Items Separately?
     */
    public void setIndividualPayment(
        @Nullable
        final Boolean individualPayment) {
        rememberChangedField("ItemIsToBePaidSeparately", this.individualPayment);
        this.individualPayment = individualPayment;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>PaymentIsToBeSentByEDI</b></p>
     * 
     * @param pmntAdviceByEDI
     *     Indicator: Send Payment Advices by EDI
     */
    public void setPmntAdviceByEDI(
        @Nullable
        final Boolean pmntAdviceByEDI) {
        rememberChangedField("PaymentIsToBeSentByEDI", this.pmntAdviceByEDI);
        this.pmntAdviceByEDI = pmntAdviceByEDI;
    }

    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>HouseBank</b></p>
     * 
     * @param houseBank
     *     Short Key for a House Bank
     */
    public void setHouseBank(
        @Nullable
        final String houseBank) {
        rememberChangedField("HouseBank", this.houseBank);
        this.houseBank = houseBank;
    }

    /**
     * Constraints: Not nullable, Precision: 3, Scale: 0 <p>Original property name from the Odata EDM: <b>CheckPaidDurationInDays</b></p>
     * 
     * @param checkCashingTime
     *     Probable Time Until Check Is Paid
     */
    public void setCheckCashingTime(
        @Nullable
        final BigDecimal checkCashingTime) {
        rememberChangedField("CheckPaidDurationInDays", this.checkCashingTime);
        this.checkCashingTime = checkCashingTime;
    }

    /**
     * Constraints: Not nullable, Maximum length: 5 <p>Original property name from the Odata EDM: <b>Currency</b></p>
     * 
     * @param currency
     *     Currency Key
     */
    public void setCurrency(
        @Nullable
        final String currency) {
        rememberChangedField("Currency", this.currency);
        this.currency = currency;
    }

    /**
     * Constraints: Not nullable, Precision: 14, Scale: 3 <p>Original property name from the Odata EDM: <b>BillOfExchLmtAmtInCoCodeCrcy</b></p>
     * 
     * @param billExLimit
     *     Bill of Exchange Limit (in Local Currency)
     */
    public void setBillExLimit(
        @Nullable
        final BigDecimal billExLimit) {
        rememberChangedField("BillOfExchLmtAmtInCoCodeCrcy", this.billExLimit);
        this.billExLimit = billExLimit;
    }

    /**
     * Constraints: Not nullable, Maximum length: 12 <p>Original property name from the Odata EDM: <b>SupplierClerkIDBySupplier</b></p>
     * 
     * @param accountWithVendor
     *     Our account number with the vendor
     */
    public void setAccountWithVendor(
        @Nullable
        final String accountWithVendor) {
        rememberChangedField("SupplierClerkIDBySupplier", this.accountWithVendor);
        this.accountWithVendor = accountWithVendor;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>ReconciliationAccount</b></p>
     * 
     * @param reconciliationAcct
     *     Reconciliation Account in General Ledger
     */
    public void setReconciliationAcct(
        @Nullable
        final String reconciliationAcct) {
        rememberChangedField("ReconciliationAccount", this.reconciliationAcct);
        this.reconciliationAcct = reconciliationAcct;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>InterestCalculationCode</b></p>
     * 
     * @param interestIndicator
     *     Interest Indicator
     */
    public void setInterestIndicator(
        @Nullable
        final String interestIndicator) {
        rememberChangedField("InterestCalculationCode", this.interestIndicator);
        this.interestIndicator = interestIndicator;
    }

    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>InterestCalculationDate</b></p>
     * 
     * @param lastKeyDate
     *     Key Date of Last Interest Calculation
     */
    public void setLastKeyDate(
        @Nullable
        final LocalDateTime lastKeyDate) {
        rememberChangedField("InterestCalculationDate", this.lastKeyDate);
        this.lastKeyDate = lastKeyDate;
    }

    /**
     * Constraints: Not nullable, Maximum length: 2 <p>Original property name from the Odata EDM: <b>IntrstCalcFrequencyInMonths</b></p>
     * 
     * @param intCalcFreq
     *     Interest Calculation Frequency in Months
     */
    public void setIntCalcFreq(
        @Nullable
        final String intCalcFreq) {
        rememberChangedField("IntrstCalcFrequencyInMonths", this.intCalcFreq);
        this.intCalcFreq = intCalcFreq;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>SupplierHeadOffice</b></p>
     * 
     * @param headOffice
     *     Head Office Account Number
     */
    public void setHeadOffice(
        @Nullable
        final String headOffice) {
        rememberChangedField("SupplierHeadOffice", this.headOffice);
        this.headOffice = headOffice;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>AlternativePayee</b></p>
     * 
     * @param alternativePayee
     *     Account number of the alternative payee
     */
    public void setAlternativePayee(
        @Nullable
        final String alternativePayee) {
        rememberChangedField("AlternativePayee", this.alternativePayee);
        this.alternativePayee = alternativePayee;
    }

    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>LayoutSortingRule</b></p>
     * 
     * @param sortKey
     *     Key for Sorting According to Assignment Numbers
     */
    public void setSortKey(
        @Nullable
        final String sortKey) {
        rememberChangedField("LayoutSortingRule", this.sortKey);
        this.sortKey = sortKey;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>APARToleranceGroup</b></p>
     * 
     * @param toleranceGroup
     *     Tolerance Group for Business Partner/G/L Account
     */
    public void setToleranceGroup(
        @Nullable
        final String toleranceGroup) {
        rememberChangedField("APARToleranceGroup", this.toleranceGroup);
        this.toleranceGroup = toleranceGroup;
    }

    /**
     * Constraints: Not nullable, Precision: 0 <p>Original property name from the Odata EDM: <b>SupplierCertificationDate</b></p>
     * 
     * @param certificationDate
     *     Certification Date
     */
    public void setCertificationDate(
        @Nullable
        final LocalDateTime certificationDate) {
        rememberChangedField("SupplierCertificationDate", this.certificationDate);
        this.certificationDate = certificationDate;
    }

    /**
     * Constraints: Not nullable, Maximum length: 30 <p>Original property name from the Odata EDM: <b>SupplierAccountNote</b></p>
     * 
     * @param accountMemo
     *     Memo
     */
    public void setAccountMemo(
        @Nullable
        final String accountMemo) {
        rememberChangedField("SupplierAccountNote", this.accountMemo);
        this.accountMemo = accountMemo;
    }

    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>WithholdingTaxCountry</b></p>
     * 
     * @param wTaxCRKey
     *     Withholding Tax Country/Region Key
     */
    public void setWTaxCRKey(
        @Nullable
        final String wTaxCRKey) {
        rememberChangedField("WithholdingTaxCountry", this.wTaxCRKey);
        this.wTaxCRKey = wTaxCRKey;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>DeletionIndicator</b></p>
     * 
     * @param coCdeDeletionFlag
     *     Deletion Flag for Master Record (Company Code Level)
     */
    public void setCoCdeDeletionFlag(
        @Nullable
        final Boolean coCdeDeletionFlag) {
        rememberChangedField("DeletionIndicator", this.coCdeDeletionFlag);
        this.coCdeDeletionFlag = coCdeDeletionFlag;
    }

    /**
     * Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>CashPlanningGroup</b></p>
     * 
     * @param planningGroup
     *     Planning Group
     */
    public void setPlanningGroup(
        @Nullable
        final String planningGroup) {
        rememberChangedField("CashPlanningGroup", this.planningGroup);
        this.planningGroup = planningGroup;
    }

    /**
     * Constraints: none<p>Original property name from the Odata EDM: <b>IsToBeCheckedForDuplicates</b></p>
     * 
     * @param checkDoubleInvoice
     *     Check Flag for Double Invoices or Credit Memos
     */
    public void setCheckDoubleInvoice(
        @Nullable
        final Boolean checkDoubleInvoice) {
        rememberChangedField("IsToBeCheckedForDuplicates", this.checkDoubleInvoice);
        this.checkDoubleInvoice = checkDoubleInvoice;
    }

    /**
     * Constraints: Not nullable, Maximum length: 3 <p>Original property name from the Odata EDM: <b>MinorityGroup</b></p>
     * 
     * @param minorityIndicator
     *     Minority Indicator
     */
    public void setMinorityIndicator(
        @Nullable
        final String minorityIndicator) {
        rememberChangedField("MinorityGroup", this.minorityIndicator);
        this.minorityIndicator = minorityIndicator;
    }

    /**
     * Constraints: Not nullable, Maximum length: 4 <p>Original property name from the Odata EDM: <b>SupplierAccountGroup</b></p>
     * 
     * @param accountGroup
     *     Supplier Account Group
     */
    public void setAccountGroup(
        @Nullable
        final String accountGroup) {
        rememberChangedField("SupplierAccountGroup", this.accountGroup);
        this.accountGroup = accountGroup;
    }

    @Override
    protected String getEntityCollection() {
        return "A_SupplierCompany";
    }

    @Nonnull
    @Override
    protected Map<String, Object> getKey() {
        final Map<String, Object> result = Maps.newHashMap();
        result.put("Supplier", getSupplier());
        result.put("CompanyCode", getCompanyCode());
        return result;
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfFields() {
        final Map<String, Object> values = super.toMapOfFields();
        values.put("Supplier", getSupplier());
        values.put("CompanyCode", getCompanyCode());
        values.put("AuthorizationGroup", getAuthorization());
        values.put("CompanyCodeName", getCompanyName());
        values.put("PaymentBlockingReason", getPaymentBlock());
        values.put("SupplierIsBlockedForPosting", getCocodePostblock());
        values.put("AccountingClerk", getClerkAbbrev());
        values.put("AccountingClerkFaxNumber", getAcctgClerksFax());
        values.put("AccountingClerkPhoneNumber", getAcctclerksTelno());
        values.put("SupplierClerk", getClerkAtVendor());
        values.put("SupplierClerkURL", getClrksInternetAdd());
        values.put("PaymentMethodsList", getPaymentMethods());
        values.put("PaymentReason", getPaymentReason());
        values.put("PaymentTerms", getTermsOfPayment());
        values.put("ClearCustomerSupplier", getClearingWithCust());
        values.put("IsToBeLocallyProcessed", getLocalProcessing());
        values.put("ItemIsToBePaidSeparately", getIndividualPayment());
        values.put("PaymentIsToBeSentByEDI", getPmntAdviceByEDI());
        values.put("HouseBank", getHouseBank());
        values.put("CheckPaidDurationInDays", getCheckCashingTime());
        values.put("Currency", getCurrency());
        values.put("BillOfExchLmtAmtInCoCodeCrcy", getBillExLimit());
        values.put("SupplierClerkIDBySupplier", getAccountWithVendor());
        values.put("ReconciliationAccount", getReconciliationAcct());
        values.put("InterestCalculationCode", getInterestIndicator());
        values.put("InterestCalculationDate", getLastKeyDate());
        values.put("IntrstCalcFrequencyInMonths", getIntCalcFreq());
        values.put("SupplierHeadOffice", getHeadOffice());
        values.put("AlternativePayee", getAlternativePayee());
        values.put("LayoutSortingRule", getSortKey());
        values.put("APARToleranceGroup", getToleranceGroup());
        values.put("SupplierCertificationDate", getCertificationDate());
        values.put("SupplierAccountNote", getAccountMemo());
        values.put("WithholdingTaxCountry", getWTaxCRKey());
        values.put("DeletionIndicator", getCoCdeDeletionFlag());
        values.put("CashPlanningGroup", getPlanningGroup());
        values.put("IsToBeCheckedForDuplicates", getCheckDoubleInvoice());
        values.put("MinorityGroup", getMinorityIndicator());
        values.put("SupplierAccountGroup", getAccountGroup());
        return values;
    }

    @Override
    protected void fromMap(final Map<String, Object> inputValues) {
        final Map<String, Object> values = Maps.newHashMap(inputValues);
        // simple properties
        {
            if (values.containsKey("Supplier")) {
                final Object value = values.remove("Supplier");
                if ((value == null)||(!value.equals(getSupplier()))) {
                    setSupplier(((String) value));
                }
            }
            if (values.containsKey("CompanyCode")) {
                final Object value = values.remove("CompanyCode");
                if ((value == null)||(!value.equals(getCompanyCode()))) {
                    setCompanyCode(((String) value));
                }
            }
            if (values.containsKey("AuthorizationGroup")) {
                final Object value = values.remove("AuthorizationGroup");
                if ((value == null)||(!value.equals(getAuthorization()))) {
                    setAuthorization(((String) value));
                }
            }
            if (values.containsKey("CompanyCodeName")) {
                final Object value = values.remove("CompanyCodeName");
                if ((value == null)||(!value.equals(getCompanyName()))) {
                    setCompanyName(((String) value));
                }
            }
            if (values.containsKey("PaymentBlockingReason")) {
                final Object value = values.remove("PaymentBlockingReason");
                if ((value == null)||(!value.equals(getPaymentBlock()))) {
                    setPaymentBlock(((String) value));
                }
            }
            if (values.containsKey("SupplierIsBlockedForPosting")) {
                final Object value = values.remove("SupplierIsBlockedForPosting");
                if ((value == null)||(!value.equals(getCocodePostblock()))) {
                    setCocodePostblock(((Boolean) value));
                }
            }
            if (values.containsKey("AccountingClerk")) {
                final Object value = values.remove("AccountingClerk");
                if ((value == null)||(!value.equals(getClerkAbbrev()))) {
                    setClerkAbbrev(((String) value));
                }
            }
            if (values.containsKey("AccountingClerkFaxNumber")) {
                final Object value = values.remove("AccountingClerkFaxNumber");
                if ((value == null)||(!value.equals(getAcctgClerksFax()))) {
                    setAcctgClerksFax(((String) value));
                }
            }
            if (values.containsKey("AccountingClerkPhoneNumber")) {
                final Object value = values.remove("AccountingClerkPhoneNumber");
                if ((value == null)||(!value.equals(getAcctclerksTelno()))) {
                    setAcctclerksTelno(((String) value));
                }
            }
            if (values.containsKey("SupplierClerk")) {
                final Object value = values.remove("SupplierClerk");
                if ((value == null)||(!value.equals(getClerkAtVendor()))) {
                    setClerkAtVendor(((String) value));
                }
            }
            if (values.containsKey("SupplierClerkURL")) {
                final Object value = values.remove("SupplierClerkURL");
                if ((value == null)||(!value.equals(getClrksInternetAdd()))) {
                    setClrksInternetAdd(((String) value));
                }
            }
            if (values.containsKey("PaymentMethodsList")) {
                final Object value = values.remove("PaymentMethodsList");
                if ((value == null)||(!value.equals(getPaymentMethods()))) {
                    setPaymentMethods(((String) value));
                }
            }
            if (values.containsKey("PaymentReason")) {
                final Object value = values.remove("PaymentReason");
                if ((value == null)||(!value.equals(getPaymentReason()))) {
                    setPaymentReason(((String) value));
                }
            }
            if (values.containsKey("PaymentTerms")) {
                final Object value = values.remove("PaymentTerms");
                if ((value == null)||(!value.equals(getTermsOfPayment()))) {
                    setTermsOfPayment(((String) value));
                }
            }
            if (values.containsKey("ClearCustomerSupplier")) {
                final Object value = values.remove("ClearCustomerSupplier");
                if ((value == null)||(!value.equals(getClearingWithCust()))) {
                    setClearingWithCust(((Boolean) value));
                }
            }
            if (values.containsKey("IsToBeLocallyProcessed")) {
                final Object value = values.remove("IsToBeLocallyProcessed");
                if ((value == null)||(!value.equals(getLocalProcessing()))) {
                    setLocalProcessing(((Boolean) value));
                }
            }
            if (values.containsKey("ItemIsToBePaidSeparately")) {
                final Object value = values.remove("ItemIsToBePaidSeparately");
                if ((value == null)||(!value.equals(getIndividualPayment()))) {
                    setIndividualPayment(((Boolean) value));
                }
            }
            if (values.containsKey("PaymentIsToBeSentByEDI")) {
                final Object value = values.remove("PaymentIsToBeSentByEDI");
                if ((value == null)||(!value.equals(getPmntAdviceByEDI()))) {
                    setPmntAdviceByEDI(((Boolean) value));
                }
            }
            if (values.containsKey("HouseBank")) {
                final Object value = values.remove("HouseBank");
                if ((value == null)||(!value.equals(getHouseBank()))) {
                    setHouseBank(((String) value));
                }
            }
            if (values.containsKey("CheckPaidDurationInDays")) {
                final Object value = values.remove("CheckPaidDurationInDays");
                if ((value == null)||(!value.equals(getCheckCashingTime()))) {
                    setCheckCashingTime(((BigDecimal) value));
                }
            }
            if (values.containsKey("Currency")) {
                final Object value = values.remove("Currency");
                if ((value == null)||(!value.equals(getCurrency()))) {
                    setCurrency(((String) value));
                }
            }
            if (values.containsKey("BillOfExchLmtAmtInCoCodeCrcy")) {
                final Object value = values.remove("BillOfExchLmtAmtInCoCodeCrcy");
                if ((value == null)||(!value.equals(getBillExLimit()))) {
                    setBillExLimit(((BigDecimal) value));
                }
            }
            if (values.containsKey("SupplierClerkIDBySupplier")) {
                final Object value = values.remove("SupplierClerkIDBySupplier");
                if ((value == null)||(!value.equals(getAccountWithVendor()))) {
                    setAccountWithVendor(((String) value));
                }
            }
            if (values.containsKey("ReconciliationAccount")) {
                final Object value = values.remove("ReconciliationAccount");
                if ((value == null)||(!value.equals(getReconciliationAcct()))) {
                    setReconciliationAcct(((String) value));
                }
            }
            if (values.containsKey("InterestCalculationCode")) {
                final Object value = values.remove("InterestCalculationCode");
                if ((value == null)||(!value.equals(getInterestIndicator()))) {
                    setInterestIndicator(((String) value));
                }
            }
            if (values.containsKey("InterestCalculationDate")) {
                final Object value = values.remove("InterestCalculationDate");
                if ((value == null)||(!value.equals(getLastKeyDate()))) {
                    setLastKeyDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("IntrstCalcFrequencyInMonths")) {
                final Object value = values.remove("IntrstCalcFrequencyInMonths");
                if ((value == null)||(!value.equals(getIntCalcFreq()))) {
                    setIntCalcFreq(((String) value));
                }
            }
            if (values.containsKey("SupplierHeadOffice")) {
                final Object value = values.remove("SupplierHeadOffice");
                if ((value == null)||(!value.equals(getHeadOffice()))) {
                    setHeadOffice(((String) value));
                }
            }
            if (values.containsKey("AlternativePayee")) {
                final Object value = values.remove("AlternativePayee");
                if ((value == null)||(!value.equals(getAlternativePayee()))) {
                    setAlternativePayee(((String) value));
                }
            }
            if (values.containsKey("LayoutSortingRule")) {
                final Object value = values.remove("LayoutSortingRule");
                if ((value == null)||(!value.equals(getSortKey()))) {
                    setSortKey(((String) value));
                }
            }
            if (values.containsKey("APARToleranceGroup")) {
                final Object value = values.remove("APARToleranceGroup");
                if ((value == null)||(!value.equals(getToleranceGroup()))) {
                    setToleranceGroup(((String) value));
                }
            }
            if (values.containsKey("SupplierCertificationDate")) {
                final Object value = values.remove("SupplierCertificationDate");
                if ((value == null)||(!value.equals(getCertificationDate()))) {
                    setCertificationDate(((LocalDateTime) value));
                }
            }
            if (values.containsKey("SupplierAccountNote")) {
                final Object value = values.remove("SupplierAccountNote");
                if ((value == null)||(!value.equals(getAccountMemo()))) {
                    setAccountMemo(((String) value));
                }
            }
            if (values.containsKey("WithholdingTaxCountry")) {
                final Object value = values.remove("WithholdingTaxCountry");
                if ((value == null)||(!value.equals(getWTaxCRKey()))) {
                    setWTaxCRKey(((String) value));
                }
            }
            if (values.containsKey("DeletionIndicator")) {
                final Object value = values.remove("DeletionIndicator");
                if ((value == null)||(!value.equals(getCoCdeDeletionFlag()))) {
                    setCoCdeDeletionFlag(((Boolean) value));
                }
            }
            if (values.containsKey("CashPlanningGroup")) {
                final Object value = values.remove("CashPlanningGroup");
                if ((value == null)||(!value.equals(getPlanningGroup()))) {
                    setPlanningGroup(((String) value));
                }
            }
            if (values.containsKey("IsToBeCheckedForDuplicates")) {
                final Object value = values.remove("IsToBeCheckedForDuplicates");
                if ((value == null)||(!value.equals(getCheckDoubleInvoice()))) {
                    setCheckDoubleInvoice(((Boolean) value));
                }
            }
            if (values.containsKey("MinorityGroup")) {
                final Object value = values.remove("MinorityGroup");
                if ((value == null)||(!value.equals(getMinorityIndicator()))) {
                    setMinorityIndicator(((String) value));
                }
            }
            if (values.containsKey("SupplierAccountGroup")) {
                final Object value = values.remove("SupplierAccountGroup");
                if ((value == null)||(!value.equals(getAccountGroup()))) {
                    setAccountGroup(((String) value));
                }
            }
        }
        // structured properties
        {
        }
        // navigation properties
        {
            if ((values).containsKey("to_CompanyText")) {
                final Object value = (values).remove("to_CompanyText");
                if (value instanceof Iterable) {
                    if (toCompanyText == null) {
                        toCompanyText = Lists.newArrayList();
                    } else {
                        toCompanyText = Lists.newArrayList(toCompanyText);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        SupplierCompanyText entity;
                        if (toCompanyText.size()>i) {
                            entity = toCompanyText.get(i);
                        } else {
                            entity = new SupplierCompanyText();
                            toCompanyText.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("to_Supplier")) {
                final Object value = (values).remove("to_Supplier");
                if (value instanceof Map) {
                    if (toSupplier == null) {
                        toSupplier = new Supplier();
                    }
                    @SuppressWarnings("unchecked")
                    final Map<String, Object> inputMap = ((Map<String, Object> ) value);
                    toSupplier.fromMap(inputMap);
                }
            }
            if ((values).containsKey("to_SupplierDunning")) {
                final Object value = (values).remove("to_SupplierDunning");
                if (value instanceof Iterable) {
                    if (toSupplierDunning == null) {
                        toSupplierDunning = Lists.newArrayList();
                    } else {
                        toSupplierDunning = Lists.newArrayList(toSupplierDunning);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        SupplierDunning entity;
                        if (toSupplierDunning.size()>i) {
                            entity = toSupplierDunning.get(i);
                        } else {
                            entity = new SupplierDunning();
                            toSupplierDunning.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
            if ((values).containsKey("to_SupplierWithHoldingTax")) {
                final Object value = (values).remove("to_SupplierWithHoldingTax");
                if (value instanceof Iterable) {
                    if (toSupplierWithHoldingTax == null) {
                        toSupplierWithHoldingTax = Lists.newArrayList();
                    } else {
                        toSupplierWithHoldingTax = Lists.newArrayList(toSupplierWithHoldingTax);
                    }
                    int i = 0;
                    for (Object item: ((Iterable<?> ) value)) {
                        if (!(item instanceof Map)) {
                            continue;
                        }
                        CompanyWithholdingTax entity;
                        if (toSupplierWithHoldingTax.size()>i) {
                            entity = toSupplierWithHoldingTax.get(i);
                        } else {
                            entity = new CompanyWithholdingTax();
                            toSupplierWithHoldingTax.add(entity);
                        }
                        i = (i + 1);
                        @SuppressWarnings("unchecked")
                        final Map<String, Object> inputMap = ((Map<String, Object> ) item);
                        entity.fromMap(inputMap);
                    }
                }
            }
        }
        super.fromMap(values);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param fieldType
     *     The Java type to use for the extension field when performing value comparisons.
     * @return
     *     A representation of an extension field from this entity.
     */
    @Nonnull
    public static<T >SupplierCompanyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final Class<T> fieldType) {
        return new SupplierCompanyField<T>(fieldName);
    }

    /**
     * Use with available fluent helpers to apply an extension field to query operations.
     * 
     * @param typeConverter
     *     A TypeConverter<T, DomainT> instance whose first generic type matches the Java type of the field
     * @param fieldName
     *     The name of the extension field as returned by the OData service.
     * @param <T>
     *     The type of the extension field when performing value comparisons.
     * @param <DomainT>
     *     The type of the extension field as returned by the OData service.
     * @return
     *     A representation of an extension field from this entity, holding a reference to the given TypeConverter.
     */
    @Nonnull
    public static<T,DomainT >SupplierCompanyField<T> field(
        @Nonnull
        final String fieldName,
        @Nonnull
        final TypeConverter<T, DomainT> typeConverter) {
        return new SupplierCompanyField<T>(fieldName, typeConverter);
    }

    @Override
    @Nullable
    public Destination getDestinationForFetch() {
        return super.getDestinationForFetch();
    }

    @Override
    protected void setServicePathForFetch(
        @Nullable
        final String servicePathForFetch) {
        super.setServicePathForFetch(servicePathForFetch);
    }

    @Override
    public void attachToService(
        @Nullable
        final String servicePath,
        @Nonnull
        final Destination destination) {
        super.attachToService(servicePath, destination);
    }

    @Override
    protected String getDefaultServicePath() {
        return (com.sap.cloud.sdk.tutorial.datamodel.odata.services.BusinessPartnerService.DEFAULT_SERVICE_PATH);
    }

    @Nonnull
    @Override
    protected Map<String, Object> toMapOfNavigationProperties() {
        final Map<String, Object> values = super.toMapOfNavigationProperties();
        if (toCompanyText!= null) {
            (values).put("to_CompanyText", toCompanyText);
        }
        if (toSupplier!= null) {
            (values).put("to_Supplier", toSupplier);
        }
        if (toSupplierDunning!= null) {
            (values).put("to_SupplierDunning", toSupplierDunning);
        }
        if (toSupplierWithHoldingTax!= null) {
            (values).put("to_SupplierWithHoldingTax", toSupplierWithHoldingTax);
        }
        return values;
    }

    /**
     * Fetches the <b>SupplierCompanyText</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>SupplierCompanyText</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<SupplierCompanyText> fetchCompanyText() {
        return fetchFieldAsList("to_CompanyText", SupplierCompanyText.class);
    }

    /**
     * Retrieval of associated <b>SupplierCompanyText</b> entities (one to many). This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>SupplierCompanyText</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<SupplierCompanyText> getCompanyTextOrFetch() {
        if (toCompanyText == null) {
            toCompanyText = fetchCompanyText();
        }
        return toCompanyText;
    }

    /**
     * Retrieval of associated <b>SupplierCompanyText</b> entities (one to many). This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property for an entity <b>SupplierCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_CompanyText</b> is already loaded, the result will contain the <b>SupplierCompanyText</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<SupplierCompanyText>> getCompanyTextIfPresent() {
        return Option.of(toCompanyText);
    }

    /**
     * Overwrites the list of associated <b>SupplierCompanyText</b> entities for the loaded navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>SupplierCompanyText</b> entities.
     */
    public void setCompanyText(
        @Nonnull
        final List<SupplierCompanyText> value) {
        if (toCompanyText == null) {
            toCompanyText = Lists.newArrayList();
        }
        toCompanyText.clear();
        toCompanyText.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>SupplierCompanyText</b> entities. This corresponds to the OData navigation property <b>to_CompanyText</b>.
     * <p>
     * If the navigation property <b>to_CompanyText</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>SupplierCompanyText</b> entities.
     */
    public void addCompanyText(SupplierCompanyText... entity) {
        if (toCompanyText == null) {
            toCompanyText = Lists.newArrayList();
        }
        toCompanyText.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>Supplier</b> entity (one to one) associated with this entity. This corresponds to the OData navigation property <b>to_Supplier</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     The single associated <b>Supplier</b> entity, or {@code null} if an entity is not associated. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Supplier fetchSupplier() {
        return fetchFieldAsSingle("to_Supplier", Supplier.class);
    }

    /**
     * Retrieval of associated <b>Supplier</b> entity (one to one). This corresponds to the OData navigation property <b>to_Supplier</b>.
     * <p>
     * If the navigation property <b>to_Supplier</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>Supplier</b> entity.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nullable
    public Supplier getSupplierOrFetch() {
        if (toSupplier == null) {
            toSupplier = fetchSupplier();
        }
        return toSupplier;
    }

    /**
     * Retrieval of associated <b>Supplier</b> entity (one to one). This corresponds to the OData navigation property <b>to_Supplier</b>.
     * <p>
     * If the navigation property for an entity <b>SupplierCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_Supplier</b> is already loaded, the result will contain the <b>Supplier</b> entity. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<Supplier> getSupplierIfPresent() {
        return Option.of(toSupplier);
    }

    /**
     * Overwrites the associated <b>Supplier</b> entity for the loaded navigation property <b>to_Supplier</b>.
     * 
     * @param value
     *     New <b>Supplier</b> entity.
     */
    public void setSupplier(final Supplier value) {
        toSupplier = value;
    }

    /**
     * Fetches the <b>SupplierDunning</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_SupplierDunning</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>SupplierDunning</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<SupplierDunning> fetchSupplierDunning() {
        return fetchFieldAsList("to_SupplierDunning", SupplierDunning.class);
    }

    /**
     * Retrieval of associated <b>SupplierDunning</b> entities (one to many). This corresponds to the OData navigation property <b>to_SupplierDunning</b>.
     * <p>
     * If the navigation property <b>to_SupplierDunning</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>SupplierDunning</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<SupplierDunning> getSupplierDunningOrFetch() {
        if (toSupplierDunning == null) {
            toSupplierDunning = fetchSupplierDunning();
        }
        return toSupplierDunning;
    }

    /**
     * Retrieval of associated <b>SupplierDunning</b> entities (one to many). This corresponds to the OData navigation property <b>to_SupplierDunning</b>.
     * <p>
     * If the navigation property for an entity <b>SupplierCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_SupplierDunning</b> is already loaded, the result will contain the <b>SupplierDunning</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<SupplierDunning>> getSupplierDunningIfPresent() {
        return Option.of(toSupplierDunning);
    }

    /**
     * Overwrites the list of associated <b>SupplierDunning</b> entities for the loaded navigation property <b>to_SupplierDunning</b>.
     * <p>
     * If the navigation property <b>to_SupplierDunning</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>SupplierDunning</b> entities.
     */
    public void setSupplierDunning(
        @Nonnull
        final List<SupplierDunning> value) {
        if (toSupplierDunning == null) {
            toSupplierDunning = Lists.newArrayList();
        }
        toSupplierDunning.clear();
        toSupplierDunning.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>SupplierDunning</b> entities. This corresponds to the OData navigation property <b>to_SupplierDunning</b>.
     * <p>
     * If the navigation property <b>to_SupplierDunning</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>SupplierDunning</b> entities.
     */
    public void addSupplierDunning(SupplierDunning... entity) {
        if (toSupplierDunning == null) {
            toSupplierDunning = Lists.newArrayList();
        }
        toSupplierDunning.addAll(Lists.newArrayList(entity));
    }

    /**
     * Fetches the <b>CompanyWithholdingTax</b> entities (one to many) associated with this entity. This corresponds to the OData navigation property <b>to_SupplierWithHoldingTax</b>.
     * <p>
     * Please note: This method will not cache or persist the query results.
     * 
     * @return
     *     List containing one or more associated <b>CompanyWithholdingTax</b> entities. If no entities are associated then an empty list is returned. 
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CompanyWithholdingTax> fetchSupplierWithHoldingTax() {
        return fetchFieldAsList("to_SupplierWithHoldingTax", CompanyWithholdingTax.class);
    }

    /**
     * Retrieval of associated <b>CompanyWithholdingTax</b> entities (one to many). This corresponds to the OData navigation property <b>to_SupplierWithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_SupplierWithHoldingTax</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @return
     *     List of associated <b>CompanyWithholdingTax</b> entities.
     * @throws ODataException
     *     If the entity is unmanaged, i.e. it has not been retrieved using the OData VDM's services and therefore has no ERP configuration context assigned. An entity is managed if it has been either retrieved using the VDM's services or returned from the VDM's services as the result of a CREATE or UPDATE call. 
     */
    @Nonnull
    public List<CompanyWithholdingTax> getSupplierWithHoldingTaxOrFetch() {
        if (toSupplierWithHoldingTax == null) {
            toSupplierWithHoldingTax = fetchSupplierWithHoldingTax();
        }
        return toSupplierWithHoldingTax;
    }

    /**
     * Retrieval of associated <b>CompanyWithholdingTax</b> entities (one to many). This corresponds to the OData navigation property <b>to_SupplierWithHoldingTax</b>.
     * <p>
     * If the navigation property for an entity <b>SupplierCompany</b> has not been resolved yet, this method will <b>not query</b> further information. Instead its <code>Option</code> result state will be <code>empty</code>.
     * 
     * @return
     *     If the information for navigation property <b>to_SupplierWithHoldingTax</b> is already loaded, the result will contain the <b>CompanyWithholdingTax</b> entities. If not, an <code>Option</code> with result state <code>empty</code> is returned.
     */
    @Nonnull
    public Option<List<CompanyWithholdingTax>> getSupplierWithHoldingTaxIfPresent() {
        return Option.of(toSupplierWithHoldingTax);
    }

    /**
     * Overwrites the list of associated <b>CompanyWithholdingTax</b> entities for the loaded navigation property <b>to_SupplierWithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_SupplierWithHoldingTax</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param value
     *     List of <b>CompanyWithholdingTax</b> entities.
     */
    public void setSupplierWithHoldingTax(
        @Nonnull
        final List<CompanyWithholdingTax> value) {
        if (toSupplierWithHoldingTax == null) {
            toSupplierWithHoldingTax = Lists.newArrayList();
        }
        toSupplierWithHoldingTax.clear();
        toSupplierWithHoldingTax.addAll(value);
    }

    /**
     * Adds elements to the list of associated <b>CompanyWithholdingTax</b> entities. This corresponds to the OData navigation property <b>to_SupplierWithHoldingTax</b>.
     * <p>
     * If the navigation property <b>to_SupplierWithHoldingTax</b> of a queried <b>SupplierCompany</b> is operated lazily, an <b>ODataException</b> can be thrown in case of an OData query error.
     * <p>
     * Please note: <i>Lazy</i> loading of OData entity associations is the process of asynchronous retrieval and persisting of items from a navigation property. If a <i>lazy</i> property is requested by the application for the first time and it has not yet been loaded, an OData query will be run in order to load the missing information and its result will get cached for future invocations.
     * 
     * @param entity
     *     Array of <b>CompanyWithholdingTax</b> entities.
     */
    public void addSupplierWithHoldingTax(CompanyWithholdingTax... entity) {
        if (toSupplierWithHoldingTax == null) {
            toSupplierWithHoldingTax = Lists.newArrayList();
        }
        toSupplierWithHoldingTax.addAll(Lists.newArrayList(entity));
    }


    /**
     * Helper class to allow for fluent creation of SupplierCompany instances.
     * 
     */
    public final static class SupplierCompanyBuilder {

        private List<SupplierCompanyText> toCompanyText = Lists.newArrayList();
        private Supplier toSupplier;
        private String supplier = null;
        private List<SupplierDunning> toSupplierDunning = Lists.newArrayList();
        private List<CompanyWithholdingTax> toSupplierWithHoldingTax = Lists.newArrayList();

        private SupplierCompany.SupplierCompanyBuilder toCompanyText(final List<SupplierCompanyText> value) {
            toCompanyText.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_CompanyText</b> for <b>SupplierCompany</b> to multiple <b>SupplierCompanyText</b>.
         * 
         * @param value
         *     The SupplierCompanyTexts to build this SupplierCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public SupplierCompany.SupplierCompanyBuilder companyText(SupplierCompanyText... value) {
            return toCompanyText(Lists.newArrayList(value));
        }

        private SupplierCompany.SupplierCompanyBuilder toSupplier(final Supplier value) {
            toSupplier = value;
            return this;
        }

        /**
         * Navigation property <b>to_Supplier</b> for <b>SupplierCompany</b> to single <b>Supplier</b>.
         * 
         * @param value
         *     The Supplier to build this SupplierCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public SupplierCompany.SupplierCompanyBuilder supplier(final Supplier value) {
            return toSupplier(value);
        }

        /**
         * (Key Field) Constraints: Not nullable, Maximum length: 10 <p>Original property name from the Odata EDM: <b>Supplier</b></p>
         * 
         * @param value
         *     The supplier to build this SupplierCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public SupplierCompany.SupplierCompanyBuilder supplier(final String value) {
            supplier = value;
            return this;
        }

        private SupplierCompany.SupplierCompanyBuilder toSupplierDunning(final List<SupplierDunning> value) {
            toSupplierDunning.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_SupplierDunning</b> for <b>SupplierCompany</b> to multiple <b>SupplierDunning</b>.
         * 
         * @param value
         *     The SupplierDunnings to build this SupplierCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public SupplierCompany.SupplierCompanyBuilder supplierDunning(SupplierDunning... value) {
            return toSupplierDunning(Lists.newArrayList(value));
        }

        private SupplierCompany.SupplierCompanyBuilder toSupplierWithHoldingTax(final List<CompanyWithholdingTax> value) {
            toSupplierWithHoldingTax.addAll(value);
            return this;
        }

        /**
         * Navigation property <b>to_SupplierWithHoldingTax</b> for <b>SupplierCompany</b> to multiple <b>CompanyWithholdingTax</b>.
         * 
         * @param value
         *     The CompanyWithholdingTaxs to build this SupplierCompany with.
         * @return
         *     This Builder to allow for a fluent interface.
         */
        @Nonnull
        public SupplierCompany.SupplierCompanyBuilder supplierWithHoldingTax(CompanyWithholdingTax... value) {
            return toSupplierWithHoldingTax(Lists.newArrayList(value));
        }

    }

}
